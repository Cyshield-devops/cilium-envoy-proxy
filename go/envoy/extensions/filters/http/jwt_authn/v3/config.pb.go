// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/extensions/filters/http/jwt_authn/v3/config.proto

package envoy_extensions_filters_http_jwt_authn_v3

import (
	fmt "fmt"
	v3 "github.com/cilium/proxy/go/envoy/config/core/v3"
	v31 "github.com/cilium/proxy/go/envoy/config/route/v3"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Please see following for JWT authentication flow:
//
// * `JSON Web Token (JWT) <https://tools.ietf.org/html/rfc7519>`_
// * `The OAuth 2.0 Authorization Framework <https://tools.ietf.org/html/rfc6749>`_
// * `OpenID Connect <http://openid.net/connect>`_
//
// A JwtProvider message specifies how a JSON Web Token (JWT) can be verified. It specifies:
//
// * issuer: the principal that issues the JWT. It has to match the one from the token.
// * allowed audiences: the ones in the token have to be listed here.
// * how to fetch public key JWKS to verify the token signature.
// * how to extract JWT token in the request.
// * how to pass successfully verified token payload.
//
// Example:
//
// .. code-block:: yaml
//
//     issuer: https://example.com
//     audiences:
//     - bookstore_android.apps.googleusercontent.com
//     - bookstore_web.apps.googleusercontent.com
//     remote_jwks:
//       http_uri:
//         uri: https://example.com/.well-known/jwks.json
//         cluster: example_jwks_cluster
//       cache_duration:
//         seconds: 300
//
// [#next-free-field: 10]
type JwtProvider struct {
	// Specify the `principal <https://tools.ietf.org/html/rfc7519#section-4.1.1>`_ that issued
	// the JWT, usually a URL or an email address.
	//
	// Example: https://securetoken.google.com
	// Example: 1234567-compute@developer.gserviceaccount.com
	//
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// The list of JWT `audiences <https://tools.ietf.org/html/rfc7519#section-4.1.3>`_ are
	// allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
	// will not check audiences in the token.
	//
	// Example:
	//
	// .. code-block:: yaml
	//
	//     audiences:
	//     - bookstore_android.apps.googleusercontent.com
	//     - bookstore_web.apps.googleusercontent.com
	//
	Audiences []string `protobuf:"bytes,2,rep,name=audiences,proto3" json:"audiences,omitempty"`
	// `JSON Web Key Set (JWKS) <https://tools.ietf.org/html/rfc7517#appendix-A>`_ is needed to
	// validate signature of a JWT. This field specifies where to fetch JWKS.
	//
	// Types that are valid to be assigned to JwksSourceSpecifier:
	//	*JwtProvider_RemoteJwks
	//	*JwtProvider_LocalJwks
	JwksSourceSpecifier isJwtProvider_JwksSourceSpecifier `protobuf_oneof:"jwks_source_specifier"`
	// If false, the JWT is removed in the request after a success verification. If true, the JWT is
	// not removed in the request. Default value is false.
	Forward bool `protobuf:"varint,5,opt,name=forward,proto3" json:"forward,omitempty"`
	// Two fields below define where to extract the JWT from an HTTP request.
	//
	// If no explicit location is specified, the following default locations are tried in order:
	//
	// 1. The Authorization header using the `Bearer schema
	// <https://tools.ietf.org/html/rfc6750#section-2.1>`_. Example::
	//
	//    Authorization: Bearer <token>.
	//
	// 2. `access_token <https://tools.ietf.org/html/rfc6750#section-2.3>`_ query parameter.
	//
	// Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
	// its provider specified or from the default locations.
	//
	// Specify the HTTP headers to extract JWT token. For examples, following config:
	//
	// .. code-block:: yaml
	//
	//   from_headers:
	//   - name: x-goog-iap-jwt-assertion
	//
	// can be used to extract token from header::
	//
	//   ``x-goog-iap-jwt-assertion: <JWT>``.
	//
	FromHeaders []*JwtHeader `protobuf:"bytes,6,rep,name=from_headers,json=fromHeaders,proto3" json:"from_headers,omitempty"`
	// JWT is sent in a query parameter. `jwt_params` represents the query parameter names.
	//
	// For example, if config is:
	//
	// .. code-block:: yaml
	//
	//   from_params:
	//   - jwt_token
	//
	// The JWT format in query parameter is::
	//
	//    /path?jwt_token=<JWT>
	//
	FromParams []string `protobuf:"bytes,7,rep,name=from_params,json=fromParams,proto3" json:"from_params,omitempty"`
	// This field specifies the header name to forward a successfully verified JWT payload to the
	// backend. The forwarded data is::
	//
	//    base64url_encoded(jwt_payload_in_JSON)
	//
	// If it is not specified, the payload will not be forwarded.
	ForwardPayloadHeader string `protobuf:"bytes,8,opt,name=forward_payload_header,json=forwardPayloadHeader,proto3" json:"forward_payload_header,omitempty"`
	// If non empty, successfully verified JWT payloads will be written to StreamInfo DynamicMetadata
	// in the format as: *namespace* is the jwt_authn filter name as **envoy.filters.http.jwt_authn**
	// The value is the *protobuf::Struct*. The value of this field will be the key for its *fields*
	// and the value is the *protobuf::Struct* converted from JWT JSON payload.
	//
	// For example, if payload_in_metadata is *my_payload*:
	//
	// .. code-block:: yaml
	//
	//   envoy.filters.http.jwt_authn:
	//     my_payload:
	//       iss: https://example.com
	//       sub: test@example.com
	//       aud: https://example.com
	//       exp: 1501281058
	//
	PayloadInMetadata    string   `protobuf:"bytes,9,opt,name=payload_in_metadata,json=payloadInMetadata,proto3" json:"payload_in_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JwtProvider) Reset()         { *m = JwtProvider{} }
func (m *JwtProvider) String() string { return proto.CompactTextString(m) }
func (*JwtProvider) ProtoMessage()    {}
func (*JwtProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_733511ccb445d825, []int{0}
}

func (m *JwtProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JwtProvider.Unmarshal(m, b)
}
func (m *JwtProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JwtProvider.Marshal(b, m, deterministic)
}
func (m *JwtProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JwtProvider.Merge(m, src)
}
func (m *JwtProvider) XXX_Size() int {
	return xxx_messageInfo_JwtProvider.Size(m)
}
func (m *JwtProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_JwtProvider.DiscardUnknown(m)
}

var xxx_messageInfo_JwtProvider proto.InternalMessageInfo

func (m *JwtProvider) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *JwtProvider) GetAudiences() []string {
	if m != nil {
		return m.Audiences
	}
	return nil
}

type isJwtProvider_JwksSourceSpecifier interface {
	isJwtProvider_JwksSourceSpecifier()
}

type JwtProvider_RemoteJwks struct {
	RemoteJwks *RemoteJwks `protobuf:"bytes,3,opt,name=remote_jwks,json=remoteJwks,proto3,oneof"`
}

type JwtProvider_LocalJwks struct {
	LocalJwks *v3.DataSource `protobuf:"bytes,4,opt,name=local_jwks,json=localJwks,proto3,oneof"`
}

func (*JwtProvider_RemoteJwks) isJwtProvider_JwksSourceSpecifier() {}

func (*JwtProvider_LocalJwks) isJwtProvider_JwksSourceSpecifier() {}

func (m *JwtProvider) GetJwksSourceSpecifier() isJwtProvider_JwksSourceSpecifier {
	if m != nil {
		return m.JwksSourceSpecifier
	}
	return nil
}

func (m *JwtProvider) GetRemoteJwks() *RemoteJwks {
	if x, ok := m.GetJwksSourceSpecifier().(*JwtProvider_RemoteJwks); ok {
		return x.RemoteJwks
	}
	return nil
}

func (m *JwtProvider) GetLocalJwks() *v3.DataSource {
	if x, ok := m.GetJwksSourceSpecifier().(*JwtProvider_LocalJwks); ok {
		return x.LocalJwks
	}
	return nil
}

func (m *JwtProvider) GetForward() bool {
	if m != nil {
		return m.Forward
	}
	return false
}

func (m *JwtProvider) GetFromHeaders() []*JwtHeader {
	if m != nil {
		return m.FromHeaders
	}
	return nil
}

func (m *JwtProvider) GetFromParams() []string {
	if m != nil {
		return m.FromParams
	}
	return nil
}

func (m *JwtProvider) GetForwardPayloadHeader() string {
	if m != nil {
		return m.ForwardPayloadHeader
	}
	return ""
}

func (m *JwtProvider) GetPayloadInMetadata() string {
	if m != nil {
		return m.PayloadInMetadata
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JwtProvider) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JwtProvider_RemoteJwks)(nil),
		(*JwtProvider_LocalJwks)(nil),
	}
}

// This message specifies how to fetch JWKS from remote and how to cache it.
type RemoteJwks struct {
	// The HTTP URI to fetch the JWKS. For example:
	//
	// .. code-block:: yaml
	//
	//    http_uri:
	//      uri: https://www.googleapis.com/oauth2/v1/certs
	//      cluster: jwt.www.googleapis.com|443
	//
	HttpUri *v3.HttpUri `protobuf:"bytes,1,opt,name=http_uri,json=httpUri,proto3" json:"http_uri,omitempty"`
	// Duration after which the cached JWKS should be expired. If not specified, default cache
	// duration is 5 minutes.
	CacheDuration        *duration.Duration `protobuf:"bytes,2,opt,name=cache_duration,json=cacheDuration,proto3" json:"cache_duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RemoteJwks) Reset()         { *m = RemoteJwks{} }
func (m *RemoteJwks) String() string { return proto.CompactTextString(m) }
func (*RemoteJwks) ProtoMessage()    {}
func (*RemoteJwks) Descriptor() ([]byte, []int) {
	return fileDescriptor_733511ccb445d825, []int{1}
}

func (m *RemoteJwks) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteJwks.Unmarshal(m, b)
}
func (m *RemoteJwks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteJwks.Marshal(b, m, deterministic)
}
func (m *RemoteJwks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteJwks.Merge(m, src)
}
func (m *RemoteJwks) XXX_Size() int {
	return xxx_messageInfo_RemoteJwks.Size(m)
}
func (m *RemoteJwks) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteJwks.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteJwks proto.InternalMessageInfo

func (m *RemoteJwks) GetHttpUri() *v3.HttpUri {
	if m != nil {
		return m.HttpUri
	}
	return nil
}

func (m *RemoteJwks) GetCacheDuration() *duration.Duration {
	if m != nil {
		return m.CacheDuration
	}
	return nil
}

// This message specifies a header location to extract JWT token.
type JwtHeader struct {
	// The HTTP header name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value prefix. The value format is "value_prefix<token>"
	// For example, for "Authorization: Bearer <token>", value_prefix="Bearer " with a space at the
	// end.
	ValuePrefix          string   `protobuf:"bytes,2,opt,name=value_prefix,json=valuePrefix,proto3" json:"value_prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JwtHeader) Reset()         { *m = JwtHeader{} }
func (m *JwtHeader) String() string { return proto.CompactTextString(m) }
func (*JwtHeader) ProtoMessage()    {}
func (*JwtHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_733511ccb445d825, []int{2}
}

func (m *JwtHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JwtHeader.Unmarshal(m, b)
}
func (m *JwtHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JwtHeader.Marshal(b, m, deterministic)
}
func (m *JwtHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JwtHeader.Merge(m, src)
}
func (m *JwtHeader) XXX_Size() int {
	return xxx_messageInfo_JwtHeader.Size(m)
}
func (m *JwtHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_JwtHeader.DiscardUnknown(m)
}

var xxx_messageInfo_JwtHeader proto.InternalMessageInfo

func (m *JwtHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JwtHeader) GetValuePrefix() string {
	if m != nil {
		return m.ValuePrefix
	}
	return ""
}

// Specify a required provider with audiences.
type ProviderWithAudiences struct {
	// Specify a required provider name.
	ProviderName string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	// This field overrides the one specified in the JwtProvider.
	Audiences            []string `protobuf:"bytes,2,rep,name=audiences,proto3" json:"audiences,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProviderWithAudiences) Reset()         { *m = ProviderWithAudiences{} }
func (m *ProviderWithAudiences) String() string { return proto.CompactTextString(m) }
func (*ProviderWithAudiences) ProtoMessage()    {}
func (*ProviderWithAudiences) Descriptor() ([]byte, []int) {
	return fileDescriptor_733511ccb445d825, []int{3}
}

func (m *ProviderWithAudiences) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderWithAudiences.Unmarshal(m, b)
}
func (m *ProviderWithAudiences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderWithAudiences.Marshal(b, m, deterministic)
}
func (m *ProviderWithAudiences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderWithAudiences.Merge(m, src)
}
func (m *ProviderWithAudiences) XXX_Size() int {
	return xxx_messageInfo_ProviderWithAudiences.Size(m)
}
func (m *ProviderWithAudiences) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderWithAudiences.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderWithAudiences proto.InternalMessageInfo

func (m *ProviderWithAudiences) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *ProviderWithAudiences) GetAudiences() []string {
	if m != nil {
		return m.Audiences
	}
	return nil
}

// This message specifies a Jwt requirement. An empty message means JWT verification is not
// required. Here are some config examples:
//
// .. code-block:: yaml
//
//  # Example 1: not required with an empty message
//
//  # Example 2: require A
//  provider_name: provider-A
//
//  # Example 3: require A or B
//  requires_any:
//    requirements:
//      - provider_name: provider-A
//      - provider_name: provider-B
//
//  # Example 4: require A and B
//  requires_all:
//    requirements:
//      - provider_name: provider-A
//      - provider_name: provider-B
//
//  # Example 5: require A and (B or C)
//  requires_all:
//    requirements:
//      - provider_name: provider-A
//      - requires_any:
//        requirements:
//          - provider_name: provider-B
//          - provider_name: provider-C
//
//  # Example 6: require A or (B and C)
//  requires_any:
//    requirements:
//      - provider_name: provider-A
//      - requires_all:
//        requirements:
//          - provider_name: provider-B
//          - provider_name: provider-C
//
//  # Example 7: A is optional (if token from A is provided, it must be valid, but also allows
//  missing token.)
//  requires_any:
//    requirements:
//    - provider_name: provider-A
//    - allow_missing: {}
//
//  # Example 8: A is optional and B is required.
//  requires_all:
//    requirements:
//    - requires_any:
//        requirements:
//        - provider_name: provider-A
//        - allow_missing: {}
//    - provider_name: provider-B
//
// [#next-free-field: 7]
type JwtRequirement struct {
	// Types that are valid to be assigned to RequiresType:
	//	*JwtRequirement_ProviderName
	//	*JwtRequirement_ProviderAndAudiences
	//	*JwtRequirement_RequiresAny
	//	*JwtRequirement_RequiresAll
	//	*JwtRequirement_AllowMissingOrFailed
	//	*JwtRequirement_AllowMissing
	RequiresType         isJwtRequirement_RequiresType `protobuf_oneof:"requires_type"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *JwtRequirement) Reset()         { *m = JwtRequirement{} }
func (m *JwtRequirement) String() string { return proto.CompactTextString(m) }
func (*JwtRequirement) ProtoMessage()    {}
func (*JwtRequirement) Descriptor() ([]byte, []int) {
	return fileDescriptor_733511ccb445d825, []int{4}
}

func (m *JwtRequirement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JwtRequirement.Unmarshal(m, b)
}
func (m *JwtRequirement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JwtRequirement.Marshal(b, m, deterministic)
}
func (m *JwtRequirement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JwtRequirement.Merge(m, src)
}
func (m *JwtRequirement) XXX_Size() int {
	return xxx_messageInfo_JwtRequirement.Size(m)
}
func (m *JwtRequirement) XXX_DiscardUnknown() {
	xxx_messageInfo_JwtRequirement.DiscardUnknown(m)
}

var xxx_messageInfo_JwtRequirement proto.InternalMessageInfo

type isJwtRequirement_RequiresType interface {
	isJwtRequirement_RequiresType()
}

type JwtRequirement_ProviderName struct {
	ProviderName string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3,oneof"`
}

type JwtRequirement_ProviderAndAudiences struct {
	ProviderAndAudiences *ProviderWithAudiences `protobuf:"bytes,2,opt,name=provider_and_audiences,json=providerAndAudiences,proto3,oneof"`
}

type JwtRequirement_RequiresAny struct {
	RequiresAny *JwtRequirementOrList `protobuf:"bytes,3,opt,name=requires_any,json=requiresAny,proto3,oneof"`
}

type JwtRequirement_RequiresAll struct {
	RequiresAll *JwtRequirementAndList `protobuf:"bytes,4,opt,name=requires_all,json=requiresAll,proto3,oneof"`
}

type JwtRequirement_AllowMissingOrFailed struct {
	AllowMissingOrFailed *empty.Empty `protobuf:"bytes,5,opt,name=allow_missing_or_failed,json=allowMissingOrFailed,proto3,oneof"`
}

type JwtRequirement_AllowMissing struct {
	AllowMissing *empty.Empty `protobuf:"bytes,6,opt,name=allow_missing,json=allowMissing,proto3,oneof"`
}

func (*JwtRequirement_ProviderName) isJwtRequirement_RequiresType() {}

func (*JwtRequirement_ProviderAndAudiences) isJwtRequirement_RequiresType() {}

func (*JwtRequirement_RequiresAny) isJwtRequirement_RequiresType() {}

func (*JwtRequirement_RequiresAll) isJwtRequirement_RequiresType() {}

func (*JwtRequirement_AllowMissingOrFailed) isJwtRequirement_RequiresType() {}

func (*JwtRequirement_AllowMissing) isJwtRequirement_RequiresType() {}

func (m *JwtRequirement) GetRequiresType() isJwtRequirement_RequiresType {
	if m != nil {
		return m.RequiresType
	}
	return nil
}

func (m *JwtRequirement) GetProviderName() string {
	if x, ok := m.GetRequiresType().(*JwtRequirement_ProviderName); ok {
		return x.ProviderName
	}
	return ""
}

func (m *JwtRequirement) GetProviderAndAudiences() *ProviderWithAudiences {
	if x, ok := m.GetRequiresType().(*JwtRequirement_ProviderAndAudiences); ok {
		return x.ProviderAndAudiences
	}
	return nil
}

func (m *JwtRequirement) GetRequiresAny() *JwtRequirementOrList {
	if x, ok := m.GetRequiresType().(*JwtRequirement_RequiresAny); ok {
		return x.RequiresAny
	}
	return nil
}

func (m *JwtRequirement) GetRequiresAll() *JwtRequirementAndList {
	if x, ok := m.GetRequiresType().(*JwtRequirement_RequiresAll); ok {
		return x.RequiresAll
	}
	return nil
}

func (m *JwtRequirement) GetAllowMissingOrFailed() *empty.Empty {
	if x, ok := m.GetRequiresType().(*JwtRequirement_AllowMissingOrFailed); ok {
		return x.AllowMissingOrFailed
	}
	return nil
}

func (m *JwtRequirement) GetAllowMissing() *empty.Empty {
	if x, ok := m.GetRequiresType().(*JwtRequirement_AllowMissing); ok {
		return x.AllowMissing
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JwtRequirement) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JwtRequirement_ProviderName)(nil),
		(*JwtRequirement_ProviderAndAudiences)(nil),
		(*JwtRequirement_RequiresAny)(nil),
		(*JwtRequirement_RequiresAll)(nil),
		(*JwtRequirement_AllowMissingOrFailed)(nil),
		(*JwtRequirement_AllowMissing)(nil),
	}
}

// This message specifies a list of RequiredProvider.
// Their results are OR-ed; if any one of them passes, the result is passed
type JwtRequirementOrList struct {
	// Specify a list of JwtRequirement.
	Requirements         []*JwtRequirement `protobuf:"bytes,1,rep,name=requirements,proto3" json:"requirements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *JwtRequirementOrList) Reset()         { *m = JwtRequirementOrList{} }
func (m *JwtRequirementOrList) String() string { return proto.CompactTextString(m) }
func (*JwtRequirementOrList) ProtoMessage()    {}
func (*JwtRequirementOrList) Descriptor() ([]byte, []int) {
	return fileDescriptor_733511ccb445d825, []int{5}
}

func (m *JwtRequirementOrList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JwtRequirementOrList.Unmarshal(m, b)
}
func (m *JwtRequirementOrList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JwtRequirementOrList.Marshal(b, m, deterministic)
}
func (m *JwtRequirementOrList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JwtRequirementOrList.Merge(m, src)
}
func (m *JwtRequirementOrList) XXX_Size() int {
	return xxx_messageInfo_JwtRequirementOrList.Size(m)
}
func (m *JwtRequirementOrList) XXX_DiscardUnknown() {
	xxx_messageInfo_JwtRequirementOrList.DiscardUnknown(m)
}

var xxx_messageInfo_JwtRequirementOrList proto.InternalMessageInfo

func (m *JwtRequirementOrList) GetRequirements() []*JwtRequirement {
	if m != nil {
		return m.Requirements
	}
	return nil
}

// This message specifies a list of RequiredProvider.
// Their results are AND-ed; all of them must pass, if one of them fails or missing, it fails.
type JwtRequirementAndList struct {
	// Specify a list of JwtRequirement.
	Requirements         []*JwtRequirement `protobuf:"bytes,1,rep,name=requirements,proto3" json:"requirements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *JwtRequirementAndList) Reset()         { *m = JwtRequirementAndList{} }
func (m *JwtRequirementAndList) String() string { return proto.CompactTextString(m) }
func (*JwtRequirementAndList) ProtoMessage()    {}
func (*JwtRequirementAndList) Descriptor() ([]byte, []int) {
	return fileDescriptor_733511ccb445d825, []int{6}
}

func (m *JwtRequirementAndList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JwtRequirementAndList.Unmarshal(m, b)
}
func (m *JwtRequirementAndList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JwtRequirementAndList.Marshal(b, m, deterministic)
}
func (m *JwtRequirementAndList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JwtRequirementAndList.Merge(m, src)
}
func (m *JwtRequirementAndList) XXX_Size() int {
	return xxx_messageInfo_JwtRequirementAndList.Size(m)
}
func (m *JwtRequirementAndList) XXX_DiscardUnknown() {
	xxx_messageInfo_JwtRequirementAndList.DiscardUnknown(m)
}

var xxx_messageInfo_JwtRequirementAndList proto.InternalMessageInfo

func (m *JwtRequirementAndList) GetRequirements() []*JwtRequirement {
	if m != nil {
		return m.Requirements
	}
	return nil
}

// This message specifies a Jwt requirement for a specific Route condition.
// Example 1:
//
// .. code-block:: yaml
//
//    - match:
//        prefix: /healthz
//
// In above example, "requires" field is empty for /healthz prefix match,
// it means that requests matching the path prefix don't require JWT authentication.
//
// Example 2:
//
// .. code-block:: yaml
//
//    - match:
//        prefix: /
//      requires: { provider_name: provider-A }
//
// In above example, all requests matched the path prefix require jwt authentication
// from "provider-A".
type RequirementRule struct {
	// The route matching parameter. Only when the match is satisfied, the "requires" field will
	// apply.
	//
	// For example: following match will match all requests.
	//
	// .. code-block:: yaml
	//
	//    match:
	//      prefix: /
	//
	Match *v31.RouteMatch `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// Specify a Jwt Requirement. Please detail comment in message JwtRequirement.
	Requires             *JwtRequirement `protobuf:"bytes,2,opt,name=requires,proto3" json:"requires,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RequirementRule) Reset()         { *m = RequirementRule{} }
func (m *RequirementRule) String() string { return proto.CompactTextString(m) }
func (*RequirementRule) ProtoMessage()    {}
func (*RequirementRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_733511ccb445d825, []int{7}
}

func (m *RequirementRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequirementRule.Unmarshal(m, b)
}
func (m *RequirementRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequirementRule.Marshal(b, m, deterministic)
}
func (m *RequirementRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequirementRule.Merge(m, src)
}
func (m *RequirementRule) XXX_Size() int {
	return xxx_messageInfo_RequirementRule.Size(m)
}
func (m *RequirementRule) XXX_DiscardUnknown() {
	xxx_messageInfo_RequirementRule.DiscardUnknown(m)
}

var xxx_messageInfo_RequirementRule proto.InternalMessageInfo

func (m *RequirementRule) GetMatch() *v31.RouteMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *RequirementRule) GetRequires() *JwtRequirement {
	if m != nil {
		return m.Requires
	}
	return nil
}

// This message specifies Jwt requirements based on stream_info.filterState.
// This FilterState should use `Router::StringAccessor` object to set a string value.
// Other HTTP filters can use it to specify Jwt requirements dynamically.
//
// Example:
//
// .. code-block:: yaml
//
//    name: jwt_selector
//    requires:
//      issuer_1:
//        provider_name: issuer1
//      issuer_2:
//        provider_name: issuer2
//
// If a filter set "jwt_selector" with "issuer_1" to FilterState for a request,
// jwt_authn filter will use JwtRequirement{"provider_name": "issuer1"} to verify.
type FilterStateRule struct {
	// The filter state name to retrieve the `Router::StringAccessor` object.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A map of string keys to requirements. The string key is the string value
	// in the FilterState with the name specified in the *name* field above.
	Requires             map[string]*JwtRequirement `protobuf:"bytes,3,rep,name=requires,proto3" json:"requires,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *FilterStateRule) Reset()         { *m = FilterStateRule{} }
func (m *FilterStateRule) String() string { return proto.CompactTextString(m) }
func (*FilterStateRule) ProtoMessage()    {}
func (*FilterStateRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_733511ccb445d825, []int{8}
}

func (m *FilterStateRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilterStateRule.Unmarshal(m, b)
}
func (m *FilterStateRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilterStateRule.Marshal(b, m, deterministic)
}
func (m *FilterStateRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterStateRule.Merge(m, src)
}
func (m *FilterStateRule) XXX_Size() int {
	return xxx_messageInfo_FilterStateRule.Size(m)
}
func (m *FilterStateRule) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterStateRule.DiscardUnknown(m)
}

var xxx_messageInfo_FilterStateRule proto.InternalMessageInfo

func (m *FilterStateRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FilterStateRule) GetRequires() map[string]*JwtRequirement {
	if m != nil {
		return m.Requires
	}
	return nil
}

// This is the Envoy HTTP filter config for JWT authentication.
//
// For example:
//
// .. code-block:: yaml
//
//   providers:
//      provider1:
//        issuer: issuer1
//        audiences:
//        - audience1
//        - audience2
//        remote_jwks:
//          http_uri:
//            uri: https://example.com/.well-known/jwks.json
//            cluster: example_jwks_cluster
//      provider2:
//        issuer: issuer2
//        local_jwks:
//          inline_string: jwks_string
//
//   rules:
//      # Not jwt verification is required for /health path
//      - match:
//          prefix: /health
//
//      # Jwt verification for provider1 is required for path prefixed with "prefix"
//      - match:
//          prefix: /prefix
//        requires:
//          provider_name: provider1
//
//      # Jwt verification for either provider1 or provider2 is required for all other requests.
//      - match:
//          prefix: /
//        requires:
//          requires_any:
//            requirements:
//              - provider_name: provider1
//              - provider_name: provider2
//
type JwtAuthentication struct {
	// Map of provider names to JwtProviders.
	//
	// .. code-block:: yaml
	//
	//   providers:
	//     provider1:
	//        issuer: issuer1
	//        audiences:
	//        - audience1
	//        - audience2
	//        remote_jwks:
	//          http_uri:
	//            uri: https://example.com/.well-known/jwks.json
	//            cluster: example_jwks_cluster
	//      provider2:
	//        issuer: provider2
	//        local_jwks:
	//          inline_string: jwks_string
	//
	Providers map[string]*JwtProvider `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Specifies requirements based on the route matches. The first matched requirement will be
	// applied. If there are overlapped match conditions, please put the most specific match first.
	//
	// Examples
	//
	// .. code-block:: yaml
	//
	//   rules:
	//     - match:
	//         prefix: /healthz
	//     - match:
	//         prefix: /baz
	//       requires:
	//         provider_name: provider1
	//     - match:
	//         prefix: /foo
	//       requires:
	//         requires_any:
	//           requirements:
	//             - provider_name: provider1
	//             - provider_name: provider2
	//     - match:
	//         prefix: /bar
	//       requires:
	//         requires_all:
	//           requirements:
	//             - provider_name: provider1
	//             - provider_name: provider2
	//
	Rules []*RequirementRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	// This message specifies Jwt requirements based on stream_info.filterState.
	// Other HTTP filters can use it to specify Jwt requirements dynamically.
	// The *rules* field above is checked first, if it could not find any matches,
	// check this one.
	FilterStateRules *FilterStateRule `protobuf:"bytes,3,opt,name=filter_state_rules,json=filterStateRules,proto3" json:"filter_state_rules,omitempty"`
	// When set to true, bypass the `CORS preflight request
	// <http://www.w3.org/TR/cors/#cross-origin-request-with-preflight>`_ regardless of JWT
	// requirements specified in the rules.
	BypassCorsPreflight  bool     `protobuf:"varint,4,opt,name=bypass_cors_preflight,json=bypassCorsPreflight,proto3" json:"bypass_cors_preflight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JwtAuthentication) Reset()         { *m = JwtAuthentication{} }
func (m *JwtAuthentication) String() string { return proto.CompactTextString(m) }
func (*JwtAuthentication) ProtoMessage()    {}
func (*JwtAuthentication) Descriptor() ([]byte, []int) {
	return fileDescriptor_733511ccb445d825, []int{9}
}

func (m *JwtAuthentication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JwtAuthentication.Unmarshal(m, b)
}
func (m *JwtAuthentication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JwtAuthentication.Marshal(b, m, deterministic)
}
func (m *JwtAuthentication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JwtAuthentication.Merge(m, src)
}
func (m *JwtAuthentication) XXX_Size() int {
	return xxx_messageInfo_JwtAuthentication.Size(m)
}
func (m *JwtAuthentication) XXX_DiscardUnknown() {
	xxx_messageInfo_JwtAuthentication.DiscardUnknown(m)
}

var xxx_messageInfo_JwtAuthentication proto.InternalMessageInfo

func (m *JwtAuthentication) GetProviders() map[string]*JwtProvider {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *JwtAuthentication) GetRules() []*RequirementRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *JwtAuthentication) GetFilterStateRules() *FilterStateRule {
	if m != nil {
		return m.FilterStateRules
	}
	return nil
}

func (m *JwtAuthentication) GetBypassCorsPreflight() bool {
	if m != nil {
		return m.BypassCorsPreflight
	}
	return false
}

func init() {
	proto.RegisterType((*JwtProvider)(nil), "envoy.extensions.filters.http.jwt_authn.v3.JwtProvider")
	proto.RegisterType((*RemoteJwks)(nil), "envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks")
	proto.RegisterType((*JwtHeader)(nil), "envoy.extensions.filters.http.jwt_authn.v3.JwtHeader")
	proto.RegisterType((*ProviderWithAudiences)(nil), "envoy.extensions.filters.http.jwt_authn.v3.ProviderWithAudiences")
	proto.RegisterType((*JwtRequirement)(nil), "envoy.extensions.filters.http.jwt_authn.v3.JwtRequirement")
	proto.RegisterType((*JwtRequirementOrList)(nil), "envoy.extensions.filters.http.jwt_authn.v3.JwtRequirementOrList")
	proto.RegisterType((*JwtRequirementAndList)(nil), "envoy.extensions.filters.http.jwt_authn.v3.JwtRequirementAndList")
	proto.RegisterType((*RequirementRule)(nil), "envoy.extensions.filters.http.jwt_authn.v3.RequirementRule")
	proto.RegisterType((*FilterStateRule)(nil), "envoy.extensions.filters.http.jwt_authn.v3.FilterStateRule")
	proto.RegisterMapType((map[string]*JwtRequirement)(nil), "envoy.extensions.filters.http.jwt_authn.v3.FilterStateRule.RequiresEntry")
	proto.RegisterType((*JwtAuthentication)(nil), "envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication")
	proto.RegisterMapType((map[string]*JwtProvider)(nil), "envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication.ProvidersEntry")
}

func init() {
	proto.RegisterFile("envoy/extensions/filters/http/jwt_authn/v3/config.proto", fileDescriptor_733511ccb445d825)
}

var fileDescriptor_733511ccb445d825 = []byte{
	// 1255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4b, 0x6f, 0x1b, 0x37,
	0x10, 0xf6, 0xca, 0x2f, 0x69, 0x64, 0x27, 0x0e, 0x13, 0x27, 0xaa, 0xf3, 0x52, 0x14, 0x14, 0x30,
	0x8a, 0x62, 0x05, 0x28, 0x2f, 0x57, 0x4e, 0x5a, 0x4b, 0x79, 0x54, 0x31, 0xe2, 0x46, 0xd9, 0xa0,
	0xaf, 0xd3, 0x82, 0xd6, 0x52, 0x16, 0x93, 0xd5, 0x72, 0x4b, 0x72, 0xa5, 0xe8, 0xd6, 0x63, 0xd0,
	0x63, 0x8f, 0xbd, 0xf6, 0xdc, 0x3f, 0xd0, 0x63, 0x81, 0x16, 0x41, 0x6f, 0xf9, 0x0f, 0xbd, 0xf7,
	0x5a, 0xe4, 0x54, 0x90, 0xcb, 0x95, 0xb4, 0xb6, 0x90, 0x76, 0x9d, 0xa2, 0x37, 0x2e, 0x87, 0xf3,
	0xf1, 0x9b, 0x6f, 0x66, 0x38, 0x0b, 0xb7, 0x48, 0x30, 0x60, 0xa3, 0x2a, 0x79, 0x21, 0x49, 0x20,
	0x28, 0x0b, 0x44, 0xb5, 0x4b, 0x7d, 0x49, 0xb8, 0xa8, 0xf6, 0xa4, 0x0c, 0xab, 0xcf, 0x86, 0xd2,
	0xc5, 0x91, 0xec, 0x05, 0xd5, 0xc1, 0xb5, 0x6a, 0x87, 0x05, 0x5d, 0x7a, 0x60, 0x87, 0x9c, 0x49,
	0x86, 0x3e, 0xd0, 0x8e, 0xf6, 0xc4, 0xd1, 0x36, 0x8e, 0xb6, 0x72, 0xb4, 0xc7, 0x8e, 0xf6, 0xe0,
	0xda, 0xc6, 0xe5, 0xf8, 0x92, 0xd8, 0xbf, 0xda, 0x61, 0x9c, 0x28, 0xb8, 0x7d, 0x2c, 0x48, 0x0c,
	0xb6, 0x71, 0x75, 0xe6, 0x01, 0x05, 0xe4, 0x46, 0x9c, 0x9a, 0x43, 0x1f, 0xa6, 0x0e, 0x71, 0x16,
	0x49, 0x7d, 0x4a, 0x2f, 0xdc, 0x0e, 0xeb, 0x87, 0x2c, 0x20, 0x81, 0x14, 0xe6, 0xf4, 0xa5, 0x03,
	0xc6, 0x0e, 0x7c, 0x52, 0xd5, 0x5f, 0xfb, 0x51, 0xb7, 0xea, 0x45, 0x1c, 0x4b, 0xca, 0x02, 0x63,
	0x3f, 0x7f, 0xd8, 0x4e, 0xfa, 0xa1, 0x1c, 0x19, 0xe3, 0xc5, 0xc8, 0x0b, 0x71, 0x15, 0x07, 0x01,
	0x93, 0xda, 0x47, 0x54, 0x85, 0xc4, 0x32, 0x4a, 0xb0, 0xaf, 0x1c, 0x31, 0x0f, 0x08, 0x57, 0x22,
	0xd0, 0xc0, 0xc8, 0xb3, 0x71, 0x6e, 0x80, 0x7d, 0xea, 0x61, 0x45, 0xd1, 0x2c, 0x62, 0x43, 0xe5,
	0x97, 0x05, 0x28, 0xee, 0x0e, 0x65, 0x9b, 0xb3, 0x01, 0xf5, 0x08, 0x47, 0x97, 0x61, 0x89, 0x0a,
	0x11, 0x11, 0x5e, 0xb2, 0xca, 0xd6, 0x66, 0xa1, 0xb9, 0xfc, 0xa6, 0xb9, 0xc0, 0x73, 0x65, 0xcb,
	0x31, 0xdb, 0xe8, 0x02, 0x14, 0x70, 0xe4, 0x51, 0x12, 0x74, 0x88, 0x28, 0xe5, 0xca, 0xf3, 0x9b,
	0x05, 0x67, 0xb2, 0x81, 0xbe, 0x86, 0x22, 0x27, 0x7d, 0x26, 0x89, 0xfb, 0x6c, 0xf8, 0x5c, 0x94,
	0xe6, 0xcb, 0xd6, 0x66, 0xb1, 0x76, 0xd3, 0xfe, 0xf7, 0xc9, 0xb1, 0x1d, 0xed, 0xbe, 0x3b, 0x7c,
	0x2e, 0x5a, 0x73, 0x0e, 0xf0, 0xf1, 0x17, 0x6a, 0x00, 0xf8, 0xac, 0x83, 0xfd, 0x18, 0x79, 0x41,
	0x23, 0x97, 0x0d, 0xb2, 0x29, 0x05, 0x95, 0x29, 0x85, 0x71, 0x0f, 0x4b, 0xfc, 0x94, 0x45, 0xbc,
	0x43, 0x5a, 0x73, 0x4e, 0x41, 0x7b, 0x69, 0x88, 0x12, 0x2c, 0x77, 0x19, 0x1f, 0x62, 0xee, 0x95,
	0x16, 0xcb, 0xd6, 0x66, 0xde, 0x49, 0x3e, 0xd1, 0x57, 0xb0, 0xd2, 0xe5, 0xac, 0xef, 0xf6, 0x08,
	0xf6, 0x08, 0x17, 0xa5, 0xa5, 0xf2, 0xfc, 0x66, 0xb1, 0x76, 0x23, 0x0b, 0xf1, 0xdd, 0xa1, 0x6c,
	0x69, 0x6f, 0xa7, 0xa8, 0xa0, 0xe2, 0xb5, 0x40, 0x97, 0x41, 0x7f, 0xba, 0x21, 0xe6, 0xb8, 0x2f,
	0x4a, 0xcb, 0x5a, 0x31, 0x50, 0x5b, 0x6d, 0xbd, 0x83, 0xae, 0xc3, 0x59, 0xc3, 0xc2, 0x0d, 0xf1,
	0xc8, 0x67, 0xd8, 0x33, 0x2c, 0x4a, 0x79, 0x95, 0x01, 0xe7, 0x8c, 0xb1, 0xb6, 0x63, 0x63, 0x8c,
	0x8b, 0x6c, 0x38, 0x9d, 0x9c, 0xa6, 0x81, 0xdb, 0x27, 0x12, 0x7b, 0x58, 0xe2, 0x52, 0x41, 0xbb,
	0x9c, 0x32, 0xa6, 0x87, 0xc1, 0x9e, 0x31, 0xd4, 0xef, 0xfc, 0xf0, 0xeb, 0xcb, 0x4b, 0x5b, 0x70,
	0x33, 0xa5, 0x57, 0x1c, 0xcc, 0x91, 0x58, 0x6a, 0xd8, 0x0f, 0x7b, 0xd8, 0x9e, 0x2a, 0x8b, 0xe6,
	0x05, 0x58, 0x57, 0xb2, 0xbb, 0x42, 0xab, 0xea, 0x8a, 0x90, 0x74, 0x68, 0x97, 0x12, 0x8e, 0xe6,
	0xff, 0x6a, 0x5a, 0x95, 0xdf, 0x2c, 0x80, 0x49, 0xde, 0xd0, 0x16, 0xe4, 0x93, 0x5e, 0xd1, 0x55,
	0x54, 0xac, 0x5d, 0x9c, 0x9d, 0xa7, 0x96, 0x94, 0xe1, 0xe7, 0x9c, 0x3a, 0xcb, 0xbd, 0x78, 0x81,
	0x76, 0xe0, 0x44, 0x07, 0x77, 0x7a, 0xc4, 0x4d, 0xba, 0xa3, 0x94, 0xd3, 0xfe, 0xef, 0xd9, 0x71,
	0x7b, 0xd8, 0x49, 0x7b, 0xd8, 0xf7, 0xcc, 0x01, 0x67, 0x55, 0x3b, 0x24, 0x9f, 0xf5, 0xdb, 0x2a,
	0xce, 0x5b, 0x70, 0x23, 0x43, 0x9c, 0x13, 0xe6, 0x95, 0x97, 0x16, 0x14, 0xc6, 0x79, 0x44, 0xe7,
	0x61, 0x21, 0xc0, 0x7d, 0x72, 0xb8, 0x13, 0xf4, 0x26, 0xba, 0x02, 0x2b, 0x03, 0xec, 0x47, 0xc4,
	0x0d, 0x39, 0xe9, 0xd2, 0x17, 0x9a, 0x68, 0xc1, 0x29, 0xea, 0xbd, 0xb6, 0xde, 0xaa, 0x6f, 0x2b,
	0x2e, 0x37, 0xe1, 0x7a, 0x36, 0xcd, 0xe3, 0xcb, 0x2b, 0x3f, 0x5a, 0xb0, 0x9e, 0xc8, 0xff, 0x25,
	0x95, 0xbd, 0xc6, 0xb8, 0xc7, 0xae, 0xc2, 0x6a, 0x68, 0x0c, 0xee, 0x84, 0x9f, 0xb3, 0x92, 0x6c,
	0x7e, 0xa6, 0xe8, 0xbd, 0xb5, 0x4d, 0xeb, 0x9f, 0x2a, 0x66, 0x4d, 0xd8, 0xc9, 0xc0, 0x6c, 0x26,
	0x97, 0xca, 0x1f, 0x0b, 0x70, 0x62, 0x77, 0x28, 0x1d, 0xf2, 0x4d, 0x44, 0x39, 0xe9, 0x93, 0x40,
	0xa2, 0xf7, 0x67, 0xd2, 0x6b, 0xcd, 0x1d, 0x22, 0x38, 0x82, 0xb3, 0xe3, 0x63, 0x38, 0xf0, 0xdc,
	0x69, 0xb6, 0x2a, 0xe5, 0x8d, 0x2c, 0xbd, 0x37, 0x93, 0x5c, 0x6b, 0xce, 0x39, 0x93, 0x5c, 0xd1,
	0x08, 0xbc, 0x89, 0x80, 0x04, 0x56, 0x78, 0x4c, 0x58, 0xb8, 0x38, 0x18, 0x99, 0x57, 0x6a, 0x27,
	0x63, 0xb3, 0x4f, 0xc5, 0xfc, 0x98, 0x3f, 0xa2, 0x42, 0xb6, 0xe6, 0x9c, 0x62, 0x82, 0xdb, 0x08,
	0x46, 0xa8, 0x3b, 0x7d, 0x8d, 0xef, 0x9b, 0x27, 0xab, 0x71, 0xfc, 0x6b, 0x1a, 0x81, 0x77, 0xe4,
	0x1e, 0xdf, 0x47, 0x8f, 0xe1, 0x1c, 0xf6, 0x7d, 0x36, 0x74, 0xfb, 0x54, 0x08, 0x1a, 0x1c, 0xb8,
	0x8c, 0xbb, 0x5d, 0x4c, 0x7d, 0x12, 0xbf, 0x72, 0xc5, 0xda, 0xd9, 0x23, 0xdd, 0x73, 0x5f, 0x0d,
	0x17, 0xa5, 0x8f, 0x76, 0xdc, 0x8b, 0xfd, 0x1e, 0xf3, 0x07, 0xda, 0x0b, 0xdd, 0x81, 0xd5, 0x14,
	0x60, 0x69, 0xe9, 0x1f, 0x60, 0x56, 0xa6, 0x61, 0xea, 0x3b, 0xaa, 0xb8, 0xb6, 0xe1, 0xa3, 0x6c,
	0x65, 0x3f, 0x15, 0x67, 0xf3, 0x24, 0xac, 0x8e, 0x95, 0x93, 0xa3, 0x90, 0x54, 0x5e, 0x59, 0x70,
	0x66, 0x96, 0xe4, 0xa8, 0x37, 0xd6, 0x58, 0x6d, 0x8a, 0x92, 0xa5, 0xdf, 0xed, 0xfa, 0xf1, 0x35,
	0x6e, 0xe6, 0xdf, 0x34, 0x17, 0xbf, 0xb7, 0x72, 0xf9, 0x9c, 0x93, 0x42, 0xae, 0x3f, 0x50, 0x51,
	0x35, 0xe0, 0x93, 0x63, 0x47, 0x15, 0x33, 0xae, 0xfc, 0x6e, 0xc1, 0xfa, 0xcc, 0xb4, 0xfe, 0x8f,
	0xb1, 0x1c, 0xa3, 0xfd, 0x67, 0x52, 0xae, 0xfc, 0x69, 0xc1, 0xc9, 0xa9, 0x6d, 0x27, 0xf2, 0x09,
	0x6a, 0xc0, 0x62, 0x1f, 0xcb, 0x4e, 0xcf, 0x3c, 0xfd, 0x57, 0xd2, 0x4f, 0xbf, 0xfe, 0x3d, 0xd2,
	0x73, 0x5e, 0x2d, 0xf6, 0xd4, 0x41, 0x4d, 0xf3, 0x3b, 0x2b, 0xb7, 0x66, 0x39, 0xb1, 0x27, 0xfa,
	0x02, 0xf2, 0x49, 0xfe, 0xcd, 0x6b, 0xf0, 0x0e, 0x2a, 0x38, 0x63, 0xac, 0x7a, 0x43, 0xc5, 0x7d,
	0x1b, 0xea, 0x99, 0x86, 0x43, 0x2a, 0xba, 0xca, 0xeb, 0x1c, 0x9c, 0x7c, 0xa0, 0x3d, 0x9e, 0x4a,
	0x2c, 0x89, 0x8e, 0xf8, 0xad, 0x73, 0x82, 0x4c, 0xc5, 0x32, 0xaf, 0x33, 0xfa, 0x30, 0x4b, 0x2c,
	0x87, 0xee, 0x4a, 0xf8, 0x88, 0xfb, 0x81, 0xe4, 0xa3, 0x49, 0x68, 0x1b, 0x43, 0x58, 0x4d, 0x99,
	0xd0, 0x1a, 0xcc, 0x3f, 0x27, 0x23, 0x33, 0x1b, 0xd4, 0x12, 0xb5, 0x61, 0x51, 0x4f, 0xa7, 0xff,
	0x40, 0xd2, 0x18, 0xa8, 0x9e, 0xdb, 0xb2, 0x8e, 0xa3, 0xe9, 0xa1, 0x98, 0x2a, 0x3f, 0x2d, 0xc0,
	0xa9, 0xdd, 0xa1, 0x6c, 0x44, 0xb2, 0x47, 0x02, 0x49, 0x3b, 0x7a, 0x92, 0xa3, 0x67, 0x50, 0x48,
	0x5e, 0xef, 0xa4, 0x17, 0x1e, 0x65, 0xa4, 0x9c, 0x46, 0x1c, 0x4f, 0x09, 0x23, 0xde, 0x04, 0x1e,
	0x3d, 0x81, 0x45, 0x1e, 0xf9, 0x66, 0x52, 0x16, 0x6b, 0xdb, 0xd9, 0x7e, 0x58, 0x53, 0x15, 0xe2,
	0xc4, 0x48, 0x88, 0x02, 0x8a, 0x7d, 0x5c, 0xf5, 0xaf, 0x4e, 0xdc, 0x18, 0x3f, 0x1e, 0x35, 0xdb,
	0xef, 0x50, 0x01, 0xce, 0x5a, 0x37, 0xbd, 0x21, 0x50, 0x0d, 0xd6, 0xf7, 0x47, 0x21, 0x16, 0xc2,
	0xed, 0x30, 0x2e, 0xf4, 0x0f, 0x89, 0x4f, 0x0f, 0x7a, 0x52, 0x4f, 0x9c, 0xbc, 0x73, 0x3a, 0x36,
	0xde, 0x65, 0x5c, 0xb4, 0x13, 0xd3, 0x46, 0x04, 0x27, 0xd2, 0x72, 0xcc, 0x28, 0x98, 0xbd, 0x74,
	0xc1, 0xdc, 0xca, 0xa8, 0x7e, 0x82, 0x3f, 0x5d, 0x2d, 0x77, 0x55, 0xb5, 0x7c, 0x0c, 0xb7, 0xb3,
	0xbd, 0x3c, 0xe9, 0x3c, 0x36, 0x9f, 0xfc, 0xfc, 0xed, 0xab, 0xd7, 0x4b, 0xb9, 0xb5, 0x1c, 0x6c,
	0x51, 0x16, 0x93, 0x0a, 0x39, 0x7b, 0x31, 0xca, 0xc0, 0xaf, 0x59, 0xbc, 0xab, 0xef, 0x6e, 0xab,
	0x51, 0xd6, 0xb6, 0xf6, 0x97, 0xf4, 0x4c, 0xbb, 0xf6, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x41,
	0x37, 0x4a, 0xa1, 0x80, 0x0e, 0x00, 0x00,
}
