// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/listener.proto

package envoy_api_v2

import (
	fmt "fmt"
	core "github.com/cilium/proxy/go/envoy/api/v2/core"
	listener "github.com/cilium/proxy/go/envoy/api/v2/listener"
	v21 "github.com/cilium/proxy/go/envoy/config/filter/accesslog/v2"
	v2 "github.com/cilium/proxy/go/envoy/config/listener/v2"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Listener_DrainType int32

const (
	// Drain in response to calling /healthcheck/fail admin endpoint (along with the health check
	// filter), listener removal/modification, and hot restart.
	Listener_DEFAULT Listener_DrainType = 0
	// Drain in response to listener removal/modification and hot restart. This setting does not
	// include /healthcheck/fail. This setting may be desirable if Envoy is hosting both ingress
	// and egress listeners.
	Listener_MODIFY_ONLY Listener_DrainType = 1
)

var Listener_DrainType_name = map[int32]string{
	0: "DEFAULT",
	1: "MODIFY_ONLY",
}

var Listener_DrainType_value = map[string]int32{
	"DEFAULT":     0,
	"MODIFY_ONLY": 1,
}

func (x Listener_DrainType) String() string {
	return proto.EnumName(Listener_DrainType_name, int32(x))
}

func (Listener_DrainType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0f8f4b6e66505502, []int{0, 0}
}

// [#next-free-field: 23]
type Listener struct {
	// The unique name by which this listener is known. If no name is provided,
	// Envoy will allocate an internal UUID for the listener. If the listener is to be dynamically
	// updated or removed via :ref:`LDS <config_listeners_lds>` a unique name must be provided.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The address that the listener should listen on. In general, the address must be unique, though
	// that is governed by the bind rules of the OS. E.g., multiple listeners can listen on port 0 on
	// Linux as the actual port will be allocated by the OS.
	Address *core.Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// A list of filter chains to consider for this listener. The
	// :ref:`FilterChain <envoy_api_msg_listener.FilterChain>` with the most specific
	// :ref:`FilterChainMatch <envoy_api_msg_listener.FilterChainMatch>` criteria is used on a
	// connection.
	//
	// Example using SNI for filter chain selection can be found in the
	// :ref:`FAQ entry <faq_how_to_setup_sni>`.
	FilterChains []*listener.FilterChain `protobuf:"bytes,3,rep,name=filter_chains,json=filterChains,proto3" json:"filter_chains,omitempty"`
	// If a connection is redirected using *iptables*, the port on which the proxy
	// receives it might be different from the original destination address. When this flag is set to
	// true, the listener hands off redirected connections to the listener associated with the
	// original destination address. If there is no listener associated with the original destination
	// address, the connection is handled by the listener that receives it. Defaults to false.
	//
	// .. attention::
	//
	//   This field is deprecated. Use :ref:`an original_dst <config_listener_filters_original_dst>`
	//   :ref:`listener filter <envoy_api_field_Listener.listener_filters>` instead.
	//
	//   Note that hand off to another listener is *NOT* performed without this flag. Once
	//   :ref:`FilterChainMatch <envoy_api_msg_listener.FilterChainMatch>` is implemented this flag
	//   will be removed, as filter chain matching can be used to select a filter chain based on the
	//   restored destination address.
	UseOriginalDst *wrappers.BoolValue `protobuf:"bytes,4,opt,name=use_original_dst,json=useOriginalDst,proto3" json:"use_original_dst,omitempty"` // Deprecated: Do not use.
	// Soft limit on size of the listenerâ€™s new connection read and write buffers.
	// If unspecified, an implementation defined default is applied (1MiB).
	PerConnectionBufferLimitBytes *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=per_connection_buffer_limit_bytes,json=perConnectionBufferLimitBytes,proto3" json:"per_connection_buffer_limit_bytes,omitempty"`
	// Listener metadata.
	Metadata *core.Metadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// [#not-implemented-hide:]
	DeprecatedV1 *Listener_DeprecatedV1 `protobuf:"bytes,7,opt,name=deprecated_v1,json=deprecatedV1,proto3" json:"deprecated_v1,omitempty"`
	// The type of draining to perform at a listener-wide level.
	DrainType Listener_DrainType `protobuf:"varint,8,opt,name=drain_type,json=drainType,proto3,enum=envoy.api.v2.Listener_DrainType" json:"drain_type,omitempty"`
	// Listener filters have the opportunity to manipulate and augment the connection metadata that
	// is used in connection filter chain matching, for example. These filters are run before any in
	// :ref:`filter_chains <envoy_api_field_Listener.filter_chains>`. Order matters as the
	// filters are processed sequentially right after a socket has been accepted by the listener, and
	// before a connection is created.
	// UDP Listener filters can be specified when the protocol in the listener socket address in
	// :ref:`protocol <envoy_api_field_core.SocketAddress.protocol>` is :ref:`UDP
	// <envoy_api_enum_value_core.SocketAddress.Protocol.UDP>`.
	// UDP listeners currently support a single filter.
	ListenerFilters []*listener.ListenerFilter `protobuf:"bytes,9,rep,name=listener_filters,json=listenerFilters,proto3" json:"listener_filters,omitempty"`
	// The timeout to wait for all listener filters to complete operation. If the timeout is reached,
	// the accepted socket is closed without a connection being created unless
	// `continue_on_listener_filters_timeout` is set to true. Specify 0 to disable the
	// timeout. If not specified, a default timeout of 15s is used.
	ListenerFiltersTimeout *duration.Duration `protobuf:"bytes,15,opt,name=listener_filters_timeout,json=listenerFiltersTimeout,proto3" json:"listener_filters_timeout,omitempty"`
	// Whether a connection should be created when listener filters timeout. Default is false.
	//
	// .. attention::
	//
	//   Some listener filters, such as :ref:`Proxy Protocol filter
	//   <config_listener_filters_proxy_protocol>`, should not be used with this option. It will cause
	//   unexpected behavior when a connection is created.
	ContinueOnListenerFiltersTimeout bool `protobuf:"varint,17,opt,name=continue_on_listener_filters_timeout,json=continueOnListenerFiltersTimeout,proto3" json:"continue_on_listener_filters_timeout,omitempty"`
	// Whether the listener should be set as a transparent socket.
	// When this flag is set to true, connections can be redirected to the listener using an
	// *iptables* *TPROXY* target, in which case the original source and destination addresses and
	// ports are preserved on accepted connections. This flag should be used in combination with
	// :ref:`an original_dst <config_listener_filters_original_dst>` :ref:`listener filter
	// <envoy_api_field_Listener.listener_filters>` to mark the connections' local addresses as
	// "restored." This can be used to hand off each redirected connection to another listener
	// associated with the connection's destination address. Direct connections to the socket without
	// using *TPROXY* cannot be distinguished from connections redirected using *TPROXY* and are
	// therefore treated as if they were redirected.
	// When this flag is set to false, the listener's socket is explicitly reset as non-transparent.
	// Setting this flag requires Envoy to run with the *CAP_NET_ADMIN* capability.
	// When this flag is not set (default), the socket is not modified, i.e. the transparent option
	// is neither set nor reset.
	Transparent *wrappers.BoolValue `protobuf:"bytes,10,opt,name=transparent,proto3" json:"transparent,omitempty"`
	// Whether the listener should set the *IP_FREEBIND* socket option. When this
	// flag is set to true, listeners can be bound to an IP address that is not
	// configured on the system running Envoy. When this flag is set to false, the
	// option *IP_FREEBIND* is disabled on the socket. When this flag is not set
	// (default), the socket is not modified, i.e. the option is neither enabled
	// nor disabled.
	Freebind *wrappers.BoolValue `protobuf:"bytes,11,opt,name=freebind,proto3" json:"freebind,omitempty"`
	// Additional socket options that may not be present in Envoy source code or
	// precompiled binaries.
	SocketOptions []*core.SocketOption `protobuf:"bytes,13,rep,name=socket_options,json=socketOptions,proto3" json:"socket_options,omitempty"`
	// Whether the listener should accept TCP Fast Open (TFO) connections.
	// When this flag is set to a value greater than 0, the option TCP_FASTOPEN is enabled on
	// the socket, with a queue length of the specified size
	// (see `details in RFC7413 <https://tools.ietf.org/html/rfc7413#section-5.1>`_).
	// When this flag is set to 0, the option TCP_FASTOPEN is disabled on the socket.
	// When this flag is not set (default), the socket is not modified,
	// i.e. the option is neither enabled nor disabled.
	//
	// On Linux, the net.ipv4.tcp_fastopen kernel parameter must include flag 0x2 to enable
	// TCP_FASTOPEN.
	// See `ip-sysctl.txt <https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt>`_.
	//
	// On macOS, only values of 0, 1, and unset are valid; other values may result in an error.
	// To set the queue length on macOS, set the net.inet.tcp.fastopen_backlog kernel parameter.
	TcpFastOpenQueueLength *wrappers.UInt32Value `protobuf:"bytes,12,opt,name=tcp_fast_open_queue_length,json=tcpFastOpenQueueLength,proto3" json:"tcp_fast_open_queue_length,omitempty"`
	// Specifies the intended direction of the traffic relative to the local Envoy.
	TrafficDirection core.TrafficDirection `protobuf:"varint,16,opt,name=traffic_direction,json=trafficDirection,proto3,enum=envoy.api.v2.core.TrafficDirection" json:"traffic_direction,omitempty"`
	// If the protocol in the listener socket address in :ref:`protocol
	// <envoy_api_field_core.SocketAddress.protocol>` is :ref:`UDP
	// <envoy_api_enum_value_core.SocketAddress.Protocol.UDP>`, this field specifies the actual udp
	// listener to create, i.e. :ref:`udp_listener_name
	// <envoy_api_field_listener.UdpListenerConfig.udp_listener_name>` = "raw_udp_listener" for
	// creating a packet-oriented UDP listener. If not present, treat it as "raw_udp_listener".
	UdpListenerConfig *listener.UdpListenerConfig `protobuf:"bytes,18,opt,name=udp_listener_config,json=udpListenerConfig,proto3" json:"udp_listener_config,omitempty"`
	// Used to represent an API listener, which is used in non-proxy clients. The type of API
	// exposed to the non-proxy application depends on the type of API listener.
	// When this field is set, no other field except for :ref:`name<envoy_api_field_Listener.name>`
	// should be set.
	//
	// .. note::
	//
	//  Currently only one ApiListener can be installed; and it can only be done via bootstrap config,
	//  not LDS.
	//
	// [#next-major-version: In the v3 API, instead of this messy approach where the socket
	// listener fields are directly in the top-level Listener message and the API listener types
	// are in the ApiListener message, the socket listener messages should be in their own message,
	// and the top-level Listener should essentially be a oneof that selects between the
	// socket listener and the various types of API listener. That way, a given Listener message
	// can structurally only contain the fields of the relevant type.]
	ApiListener *v2.ApiListener `protobuf:"bytes,19,opt,name=api_listener,json=apiListener,proto3" json:"api_listener,omitempty"`
	// The listener's connection balancer configuration, currently only applicable to TCP listeners.
	// If no configuration is specified, Envoy will not attempt to balance active connections between
	// worker threads.
	ConnectionBalanceConfig *Listener_ConnectionBalanceConfig `protobuf:"bytes,20,opt,name=connection_balance_config,json=connectionBalanceConfig,proto3" json:"connection_balance_config,omitempty"`
	// When this flag is set to true, listeners set the *SO_REUSEPORT* socket option and
	// create one socket for each worker thread. This makes inbound connections
	// distribute among worker threads roughly evenly in cases where there are a high number
	// of connections. When this flag is set to false, all worker threads share one socket.
	//
	// Before Linux v4.19-rc1, new TCP connections may be rejected during hot restart
	// (see `3rd paragraph in 'soreuseport' commit message
	// <https://github.com/torvalds/linux/commit/c617f398edd4db2b8567a28e89>`_).
	// This issue was fixed by `tcp: Avoid TCP syncookie rejected by SO_REUSEPORT socket
	// <https://github.com/torvalds/linux/commit/40a1227ea845a37ab197dd1caffb60b047fa36b1>`_.
	ReusePort bool `protobuf:"varint,21,opt,name=reuse_port,json=reusePort,proto3" json:"reuse_port,omitempty"`
	// Configuration for :ref:`access logs <arch_overview_access_logs>`
	// emitted by this listener.
	AccessLog            []*v21.AccessLog `protobuf:"bytes,22,rep,name=access_log,json=accessLog,proto3" json:"access_log,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Listener) Reset()         { *m = Listener{} }
func (m *Listener) String() string { return proto.CompactTextString(m) }
func (*Listener) ProtoMessage()    {}
func (*Listener) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f8f4b6e66505502, []int{0}
}

func (m *Listener) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Listener.Unmarshal(m, b)
}
func (m *Listener) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Listener.Marshal(b, m, deterministic)
}
func (m *Listener) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Listener.Merge(m, src)
}
func (m *Listener) XXX_Size() int {
	return xxx_messageInfo_Listener.Size(m)
}
func (m *Listener) XXX_DiscardUnknown() {
	xxx_messageInfo_Listener.DiscardUnknown(m)
}

var xxx_messageInfo_Listener proto.InternalMessageInfo

func (m *Listener) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Listener) GetAddress() *core.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Listener) GetFilterChains() []*listener.FilterChain {
	if m != nil {
		return m.FilterChains
	}
	return nil
}

// Deprecated: Do not use.
func (m *Listener) GetUseOriginalDst() *wrappers.BoolValue {
	if m != nil {
		return m.UseOriginalDst
	}
	return nil
}

func (m *Listener) GetPerConnectionBufferLimitBytes() *wrappers.UInt32Value {
	if m != nil {
		return m.PerConnectionBufferLimitBytes
	}
	return nil
}

func (m *Listener) GetMetadata() *core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Listener) GetDeprecatedV1() *Listener_DeprecatedV1 {
	if m != nil {
		return m.DeprecatedV1
	}
	return nil
}

func (m *Listener) GetDrainType() Listener_DrainType {
	if m != nil {
		return m.DrainType
	}
	return Listener_DEFAULT
}

func (m *Listener) GetListenerFilters() []*listener.ListenerFilter {
	if m != nil {
		return m.ListenerFilters
	}
	return nil
}

func (m *Listener) GetListenerFiltersTimeout() *duration.Duration {
	if m != nil {
		return m.ListenerFiltersTimeout
	}
	return nil
}

func (m *Listener) GetContinueOnListenerFiltersTimeout() bool {
	if m != nil {
		return m.ContinueOnListenerFiltersTimeout
	}
	return false
}

func (m *Listener) GetTransparent() *wrappers.BoolValue {
	if m != nil {
		return m.Transparent
	}
	return nil
}

func (m *Listener) GetFreebind() *wrappers.BoolValue {
	if m != nil {
		return m.Freebind
	}
	return nil
}

func (m *Listener) GetSocketOptions() []*core.SocketOption {
	if m != nil {
		return m.SocketOptions
	}
	return nil
}

func (m *Listener) GetTcpFastOpenQueueLength() *wrappers.UInt32Value {
	if m != nil {
		return m.TcpFastOpenQueueLength
	}
	return nil
}

func (m *Listener) GetTrafficDirection() core.TrafficDirection {
	if m != nil {
		return m.TrafficDirection
	}
	return core.TrafficDirection_UNSPECIFIED
}

func (m *Listener) GetUdpListenerConfig() *listener.UdpListenerConfig {
	if m != nil {
		return m.UdpListenerConfig
	}
	return nil
}

func (m *Listener) GetApiListener() *v2.ApiListener {
	if m != nil {
		return m.ApiListener
	}
	return nil
}

func (m *Listener) GetConnectionBalanceConfig() *Listener_ConnectionBalanceConfig {
	if m != nil {
		return m.ConnectionBalanceConfig
	}
	return nil
}

func (m *Listener) GetReusePort() bool {
	if m != nil {
		return m.ReusePort
	}
	return false
}

func (m *Listener) GetAccessLog() []*v21.AccessLog {
	if m != nil {
		return m.AccessLog
	}
	return nil
}

// [#not-implemented-hide:]
type Listener_DeprecatedV1 struct {
	// Whether the listener should bind to the port. A listener that doesn't
	// bind can only receive connections redirected from other listeners that
	// set use_original_dst parameter to true. Default is true.
	//
	// This is deprecated in v2, all Listeners will bind to their port. An
	// additional filter chain must be created for every original destination
	// port this listener may redirect to in v2, with the original port
	// specified in the FilterChainMatch destination_port field.
	//
	// [#comment:TODO(PiotrSikora): Remove this once verified that we no longer need it.]
	BindToPort           *wrappers.BoolValue `protobuf:"bytes,1,opt,name=bind_to_port,json=bindToPort,proto3" json:"bind_to_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Listener_DeprecatedV1) Reset()         { *m = Listener_DeprecatedV1{} }
func (m *Listener_DeprecatedV1) String() string { return proto.CompactTextString(m) }
func (*Listener_DeprecatedV1) ProtoMessage()    {}
func (*Listener_DeprecatedV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f8f4b6e66505502, []int{0, 0}
}

func (m *Listener_DeprecatedV1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Listener_DeprecatedV1.Unmarshal(m, b)
}
func (m *Listener_DeprecatedV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Listener_DeprecatedV1.Marshal(b, m, deterministic)
}
func (m *Listener_DeprecatedV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Listener_DeprecatedV1.Merge(m, src)
}
func (m *Listener_DeprecatedV1) XXX_Size() int {
	return xxx_messageInfo_Listener_DeprecatedV1.Size(m)
}
func (m *Listener_DeprecatedV1) XXX_DiscardUnknown() {
	xxx_messageInfo_Listener_DeprecatedV1.DiscardUnknown(m)
}

var xxx_messageInfo_Listener_DeprecatedV1 proto.InternalMessageInfo

func (m *Listener_DeprecatedV1) GetBindToPort() *wrappers.BoolValue {
	if m != nil {
		return m.BindToPort
	}
	return nil
}

// Configuration for listener connection balancing.
type Listener_ConnectionBalanceConfig struct {
	// Types that are valid to be assigned to BalanceType:
	//	*Listener_ConnectionBalanceConfig_ExactBalance_
	BalanceType          isListener_ConnectionBalanceConfig_BalanceType `protobuf_oneof:"balance_type"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *Listener_ConnectionBalanceConfig) Reset()         { *m = Listener_ConnectionBalanceConfig{} }
func (m *Listener_ConnectionBalanceConfig) String() string { return proto.CompactTextString(m) }
func (*Listener_ConnectionBalanceConfig) ProtoMessage()    {}
func (*Listener_ConnectionBalanceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f8f4b6e66505502, []int{0, 1}
}

func (m *Listener_ConnectionBalanceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Listener_ConnectionBalanceConfig.Unmarshal(m, b)
}
func (m *Listener_ConnectionBalanceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Listener_ConnectionBalanceConfig.Marshal(b, m, deterministic)
}
func (m *Listener_ConnectionBalanceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Listener_ConnectionBalanceConfig.Merge(m, src)
}
func (m *Listener_ConnectionBalanceConfig) XXX_Size() int {
	return xxx_messageInfo_Listener_ConnectionBalanceConfig.Size(m)
}
func (m *Listener_ConnectionBalanceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Listener_ConnectionBalanceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Listener_ConnectionBalanceConfig proto.InternalMessageInfo

type isListener_ConnectionBalanceConfig_BalanceType interface {
	isListener_ConnectionBalanceConfig_BalanceType()
}

type Listener_ConnectionBalanceConfig_ExactBalance_ struct {
	ExactBalance *Listener_ConnectionBalanceConfig_ExactBalance `protobuf:"bytes,1,opt,name=exact_balance,json=exactBalance,proto3,oneof"`
}

func (*Listener_ConnectionBalanceConfig_ExactBalance_) isListener_ConnectionBalanceConfig_BalanceType() {
}

func (m *Listener_ConnectionBalanceConfig) GetBalanceType() isListener_ConnectionBalanceConfig_BalanceType {
	if m != nil {
		return m.BalanceType
	}
	return nil
}

func (m *Listener_ConnectionBalanceConfig) GetExactBalance() *Listener_ConnectionBalanceConfig_ExactBalance {
	if x, ok := m.GetBalanceType().(*Listener_ConnectionBalanceConfig_ExactBalance_); ok {
		return x.ExactBalance
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Listener_ConnectionBalanceConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Listener_ConnectionBalanceConfig_ExactBalance_)(nil),
	}
}

// A connection balancer implementation that does exact balancing. This means that a lock is
// held during balancing so that connection counts are nearly exactly balanced between worker
// threads. This is "nearly" exact in the sense that a connection might close in parallel thus
// making the counts incorrect, but this should be rectified on the next accept. This balancer
// sacrifices accept throughput for accuracy and should be used when there are a small number of
// connections that rarely cycle (e.g., service mesh gRPC egress).
type Listener_ConnectionBalanceConfig_ExactBalance struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Listener_ConnectionBalanceConfig_ExactBalance) Reset() {
	*m = Listener_ConnectionBalanceConfig_ExactBalance{}
}
func (m *Listener_ConnectionBalanceConfig_ExactBalance) String() string {
	return proto.CompactTextString(m)
}
func (*Listener_ConnectionBalanceConfig_ExactBalance) ProtoMessage() {}
func (*Listener_ConnectionBalanceConfig_ExactBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f8f4b6e66505502, []int{0, 1, 0}
}

func (m *Listener_ConnectionBalanceConfig_ExactBalance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Listener_ConnectionBalanceConfig_ExactBalance.Unmarshal(m, b)
}
func (m *Listener_ConnectionBalanceConfig_ExactBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Listener_ConnectionBalanceConfig_ExactBalance.Marshal(b, m, deterministic)
}
func (m *Listener_ConnectionBalanceConfig_ExactBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Listener_ConnectionBalanceConfig_ExactBalance.Merge(m, src)
}
func (m *Listener_ConnectionBalanceConfig_ExactBalance) XXX_Size() int {
	return xxx_messageInfo_Listener_ConnectionBalanceConfig_ExactBalance.Size(m)
}
func (m *Listener_ConnectionBalanceConfig_ExactBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_Listener_ConnectionBalanceConfig_ExactBalance.DiscardUnknown(m)
}

var xxx_messageInfo_Listener_ConnectionBalanceConfig_ExactBalance proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("envoy.api.v2.Listener_DrainType", Listener_DrainType_name, Listener_DrainType_value)
	proto.RegisterType((*Listener)(nil), "envoy.api.v2.Listener")
	proto.RegisterType((*Listener_DeprecatedV1)(nil), "envoy.api.v2.Listener.DeprecatedV1")
	proto.RegisterType((*Listener_ConnectionBalanceConfig)(nil), "envoy.api.v2.Listener.ConnectionBalanceConfig")
	proto.RegisterType((*Listener_ConnectionBalanceConfig_ExactBalance)(nil), "envoy.api.v2.Listener.ConnectionBalanceConfig.ExactBalance")
}

func init() { proto.RegisterFile("envoy/api/v2/listener.proto", fileDescriptor_0f8f4b6e66505502) }

var fileDescriptor_0f8f4b6e66505502 = []byte{
	// 1046 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4d, 0x73, 0x1b, 0xb5,
	0x1b, 0xef, 0xa6, 0x79, 0xb1, 0xe5, 0x97, 0x38, 0xca, 0xff, 0x9f, 0x6c, 0xdd, 0x84, 0x9a, 0x94,
	0xce, 0x98, 0xe9, 0xcc, 0x9a, 0x3a, 0x33, 0x70, 0xa0, 0x03, 0x13, 0xc7, 0x0d, 0x69, 0xc7, 0xad,
	0xc3, 0x36, 0xe9, 0xb4, 0x27, 0x8d, 0xbc, 0xab, 0x75, 0x05, 0x6b, 0x49, 0x48, 0x5a, 0xd3, 0xdc,
	0x38, 0x73, 0xe1, 0xca, 0x85, 0x0b, 0x1f, 0x83, 0x4f, 0xc0, 0x95, 0xaf, 0xc2, 0x89, 0xe1, 0xc0,
	0x30, 0xab, 0x7d, 0xc9, 0x3a, 0xb6, 0x09, 0xdc, 0xf4, 0xe8, 0xf9, 0xfd, 0x7e, 0xfb, 0xbc, 0xed,
	0x23, 0x70, 0x97, 0xb0, 0x29, 0xbf, 0xec, 0x60, 0x41, 0x3b, 0xd3, 0x6e, 0x27, 0xa4, 0x4a, 0x13,
	0x46, 0xa4, 0x23, 0x24, 0xd7, 0x1c, 0x56, 0x8d, 0xd3, 0xc1, 0x82, 0x3a, 0xd3, 0x6e, 0xf3, 0xde,
	0x0c, 0xd4, 0xe3, 0x92, 0x74, 0xb0, 0xef, 0x4b, 0xa2, 0x54, 0x02, 0x6f, 0xee, 0xcd, 0x03, 0x46,
	0x58, 0x91, 0xd4, 0xfb, 0x60, 0xde, 0xab, 0xb8, 0xf7, 0x35, 0xd1, 0x88, 0x0b, 0x4d, 0x39, 0x4b,
	0x61, 0x9d, 0x85, 0x01, 0xe5, 0x07, 0xe4, 0xf1, 0x89, 0xe0, 0x8c, 0x30, 0xad, 0xfe, 0x99, 0x10,
	0xf9, 0x02, 0x15, 0x48, 0x2c, 0xa0, 0xe3, 0x94, 0xf0, 0x51, 0x42, 0x48, 0xee, 0x3a, 0x01, 0x0d,
	0x35, 0x91, 0x1d, 0xec, 0x79, 0x44, 0xa9, 0x90, 0x8f, 0x63, 0x91, 0xdc, 0x48, 0x19, 0x0f, 0x67,
	0x18, 0xf9, 0x27, 0x62, 0xa4, 0xa0, 0x68, 0xb6, 0x68, 0xcd, 0xbd, 0x31, 0xe7, 0xe3, 0x90, 0x98,
	0x80, 0x30, 0x63, 0x5c, 0xe3, 0x38, 0xbb, 0x2c, 0xda, 0xf7, 0x52, 0xaf, 0xb1, 0x46, 0x51, 0xd0,
	0xf1, 0x23, 0x89, 0x0b, 0xe9, 0xcf, 0xf9, 0xbf, 0x95, 0x58, 0x08, 0x22, 0x73, 0x7e, 0xe4, 0x0b,
	0x5c, 0xd4, 0xed, 0x4c, 0xe8, 0x58, 0x62, 0x9d, 0x55, 0x79, 0x7f, 0xce, 0xaf, 0x34, 0xd6, 0x51,
	0x46, 0xdf, 0x9d, 0xe2, 0x90, 0xfa, 0x58, 0x93, 0x4e, 0x76, 0x48, 0x1c, 0x07, 0x3f, 0xd5, 0x41,
	0x69, 0x90, 0x26, 0x02, 0x21, 0x58, 0x65, 0x78, 0x42, 0x6c, 0xab, 0x65, 0xb5, 0xcb, 0xae, 0x39,
	0xc3, 0xcf, 0xc0, 0x46, 0xda, 0x6d, 0x7b, 0xa5, 0x65, 0xb5, 0x2b, 0xdd, 0xa6, 0x53, 0x9c, 0x0e,
	0x27, 0x6e, 0xa8, 0x73, 0x94, 0x20, 0x7a, 0xa5, 0x3f, 0x7b, 0x6b, 0xdf, 0x5b, 0x2b, 0x0d, 0xcb,
	0xcd, 0x48, 0xf0, 0x0b, 0x50, 0x4b, 0x4a, 0x8d, 0xbc, 0xb7, 0x98, 0x32, 0x65, 0xdf, 0x6e, 0xdd,
	0x6e, 0x57, 0xba, 0x07, 0xb3, 0x2a, 0x79, 0x2d, 0x4f, 0x0c, 0xf6, 0x38, 0x86, 0xba, 0xd5, 0xe0,
	0xca, 0x50, 0xf0, 0x14, 0x34, 0x22, 0x45, 0x10, 0x97, 0x74, 0x4c, 0x19, 0x0e, 0x91, 0xaf, 0xb4,
	0xbd, 0x9a, 0x46, 0x94, 0x14, 0xcf, 0xc9, 0x8a, 0xe7, 0xf4, 0x38, 0x0f, 0x5f, 0xe1, 0x30, 0x22,
	0xbd, 0x15, 0xdb, 0x72, 0xeb, 0x91, 0x22, 0xc3, 0x94, 0xd6, 0x57, 0x1a, 0x06, 0xe0, 0x7d, 0x91,
	0x0c, 0x07, 0x23, 0x5e, 0x5c, 0x2c, 0x34, 0x8a, 0x82, 0x80, 0x48, 0x14, 0xd2, 0x09, 0xd5, 0x68,
	0x74, 0xa9, 0x89, 0xb2, 0xd7, 0x8c, 0xf4, 0xde, 0x9c, 0xf4, 0xc5, 0x53, 0xa6, 0x0f, 0xbb, 0x46,
	0xdc, 0xdd, 0x17, 0x44, 0x1e, 0xe7, 0x2a, 0x3d, 0x23, 0x32, 0x88, 0x35, 0x7a, 0xb1, 0x04, 0xfc,
	0x04, 0x94, 0x26, 0x44, 0x63, 0x1f, 0x6b, 0x6c, 0xaf, 0x1b, 0xb9, 0xbb, 0x0b, 0x6a, 0xf7, 0x3c,
	0x85, 0xb8, 0x39, 0x18, 0x9e, 0x82, 0x9a, 0x4f, 0x84, 0x24, 0x1e, 0xd6, 0xc4, 0x47, 0xd3, 0x47,
	0xf6, 0x86, 0x61, 0xdf, 0x9f, 0x65, 0x67, 0x6d, 0x73, 0xfa, 0x39, 0xf6, 0xd5, 0x23, 0xb7, 0xea,
	0x17, 0x2c, 0xf8, 0x39, 0x00, 0xbe, 0xc4, 0x94, 0x21, 0x7d, 0x29, 0x88, 0x5d, 0x6a, 0x59, 0xed,
	0x7a, 0xb7, 0xb5, 0x4c, 0x26, 0x06, 0x9e, 0x5f, 0x0a, 0xe2, 0x96, 0xfd, 0xec, 0x08, 0xcf, 0x40,
	0x23, 0xff, 0x9b, 0x92, 0x76, 0x28, 0xbb, 0x6c, 0x3a, 0xf8, 0x60, 0x49, 0x07, 0x33, 0xbd, 0xa4,
	0x93, 0xee, 0x66, 0x38, 0x63, 0x2b, 0xf8, 0x12, 0xd8, 0xd7, 0x15, 0x91, 0xa6, 0x13, 0xc2, 0x23,
	0x6d, 0x6f, 0x9a, 0x3c, 0xef, 0xcc, 0x15, 0xbd, 0x9f, 0xfe, 0x2c, 0xee, 0xce, 0x35, 0xb5, 0xf3,
	0x84, 0x08, 0x5f, 0x80, 0x0f, 0x3c, 0xce, 0x34, 0x65, 0x11, 0x41, 0x9c, 0xa1, 0xa5, 0x1f, 0xd8,
	0x6a, 0x59, 0xed, 0x92, 0xdb, 0xca, 0xb0, 0x43, 0x36, 0x58, 0xac, 0xf7, 0x18, 0x54, 0xb4, 0xc4,
	0x4c, 0x09, 0x2c, 0x09, 0xd3, 0x36, 0xb8, 0x69, 0xce, 0xdc, 0x22, 0x1c, 0x7e, 0x0c, 0x4a, 0x81,
	0x24, 0x64, 0x44, 0x99, 0x6f, 0x57, 0x6e, 0xa4, 0xe6, 0x58, 0x78, 0x02, 0xea, 0x33, 0xab, 0x51,
	0xd9, 0x35, 0x53, 0xea, 0x7b, 0x0b, 0xc6, 0xe6, 0xa5, 0x01, 0x0e, 0x0d, 0xce, 0xad, 0xa9, 0x82,
	0xa5, 0xe0, 0x6b, 0xd0, 0xd4, 0x9e, 0x40, 0x01, 0x56, 0xb1, 0x12, 0x61, 0xe8, 0x9b, 0x88, 0x44,
	0x04, 0x85, 0x84, 0x8d, 0xf5, 0x5b, 0xbb, 0xfa, 0x2f, 0x26, 0x7b, 0x47, 0x7b, 0xe2, 0x04, 0x2b,
	0x3d, 0x14, 0x84, 0x7d, 0x19, 0x93, 0x07, 0x86, 0x0b, 0xcf, 0xc0, 0x96, 0x96, 0x38, 0x08, 0xa8,
	0x87, 0x7c, 0x2a, 0x93, 0xb9, 0xb7, 0x1b, 0x66, 0xac, 0xee, 0x2f, 0x08, 0xf2, 0x3c, 0xc1, 0xf6,
	0x33, 0xa8, 0xdb, 0xd0, 0xd7, 0x6e, 0xe0, 0x6b, 0xb0, 0xbd, 0x60, 0x65, 0xdb, 0xd0, 0x04, 0xd9,
	0x5e, 0x32, 0x63, 0x17, 0xbe, 0xc8, 0x1a, 0x77, 0x6c, 0xf0, 0xee, 0x56, 0x74, 0xfd, 0x0a, 0x9e,
	0x82, 0x6a, 0x71, 0x4d, 0xdb, 0xdb, 0x46, 0x32, 0x1b, 0xdb, 0xf4, 0x69, 0xc8, 0x25, 0xa7, 0x5d,
	0xe7, 0x48, 0xd0, 0x4c, 0xc2, 0xad, 0xe0, 0x2b, 0x03, 0x7e, 0x05, 0xee, 0x14, 0x97, 0x05, 0x0e,
	0x31, 0xf3, 0x48, 0x16, 0xe9, 0xff, 0x8c, 0xac, 0xb3, 0xe4, 0xa7, 0x2a, 0xac, 0x87, 0x84, 0x96,
	0xc6, 0xbb, 0xeb, 0x2d, 0x76, 0xc0, 0x7d, 0x00, 0x24, 0x89, 0x17, 0x9d, 0xe0, 0x52, 0xdb, 0xff,
	0x37, 0xf3, 0x5a, 0x36, 0x37, 0x67, 0x5c, 0x6a, 0xf8, 0x0c, 0x80, 0xe4, 0x95, 0x42, 0x21, 0x1f,
	0xdb, 0x3b, 0x66, 0x3c, 0x1e, 0xce, 0xa6, 0x94, 0xcc, 0xbc, 0x73, 0xf5, 0x98, 0xc5, 0xa9, 0x19,
	0x63, 0xc0, 0xc7, 0x6e, 0x19, 0x67, 0xc7, 0xe6, 0x00, 0x54, 0x8b, 0xab, 0x03, 0x3e, 0x06, 0xd5,
	0x78, 0x0c, 0x91, 0xe6, 0xc9, 0xc7, 0xad, 0x1b, 0x47, 0x17, 0xc4, 0xf8, 0x73, 0x1e, 0x47, 0xd6,
	0xfc, 0xd9, 0x02, 0xbb, 0x4b, 0xb2, 0x85, 0x23, 0x50, 0x23, 0xef, 0xb0, 0xa7, 0xb3, 0xda, 0xa5,
	0xd2, 0x9f, 0xfe, 0xb7, 0xa2, 0x39, 0x4f, 0x62, 0x8d, 0xf4, 0xea, 0xf4, 0x96, 0x5b, 0x25, 0x05,
	0xbb, 0x59, 0x07, 0xd5, 0xa2, 0xbf, 0xb7, 0x0d, 0xaa, 0x59, 0xa7, 0xe2, 0xe5, 0x07, 0x6f, 0xff,
	0xd1, 0xb3, 0x0e, 0x3e, 0x04, 0xe5, 0x7c, 0xcd, 0xc1, 0x0a, 0xd8, 0xe8, 0x3f, 0x39, 0x39, 0xba,
	0x18, 0x9c, 0x37, 0x6e, 0xc1, 0x4d, 0x50, 0x79, 0x3e, 0xec, 0x3f, 0x3d, 0x79, 0x83, 0x86, 0x2f,
	0x06, 0x6f, 0x1a, 0xd6, 0xb3, 0xd5, 0x52, 0xbd, 0xb1, 0xd9, 0xbb, 0xf8, 0xfd, 0xc7, 0xbf, 0x7e,
	0x58, 0x6b, 0x42, 0x7b, 0xc9, 0xd4, 0x1c, 0xfe, 0xf2, 0xdd, 0xaf, 0xbf, 0xad, 0xaf, 0x34, 0x2c,
	0xd0, 0xa4, 0x3c, 0x49, 0x47, 0x48, 0xfe, 0xee, 0x72, 0x26, 0xb3, 0x5e, 0x2d, 0x4b, 0xed, 0x2c,
	0xae, 0xe1, 0x99, 0x35, 0x5a, 0x37, 0xc5, 0x3c, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xcc,
	0xae, 0xe0, 0x87, 0x09, 0x00, 0x00,
}
