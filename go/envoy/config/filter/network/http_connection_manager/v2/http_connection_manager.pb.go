// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto

package v2

import (
	fmt "fmt"
	v2 "github.com/cilium/proxy/go/envoy/api/v2"
	core "github.com/cilium/proxy/go/envoy/api/v2/core"
	v21 "github.com/cilium/proxy/go/envoy/config/filter/accesslog/v2"
	_type "github.com/cilium/proxy/go/envoy/type"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/lyft/protoc-gen-validate/validate"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HttpConnectionManager_CodecType int32

const (
	// For every new connection, the connection manager will determine which
	// codec to use. This mode supports both ALPN for TLS listeners as well as
	// protocol inference for plaintext listeners. If ALPN data is available, it
	// is preferred, otherwise protocol inference is used. In almost all cases,
	// this is the right option to choose for this setting.
	HttpConnectionManager_AUTO HttpConnectionManager_CodecType = 0
	// The connection manager will assume that the client is speaking HTTP/1.1.
	HttpConnectionManager_HTTP1 HttpConnectionManager_CodecType = 1
	// The connection manager will assume that the client is speaking HTTP/2
	// (Envoy does not require HTTP/2 to take place over TLS or to use ALPN.
	// Prior knowledge is allowed).
	HttpConnectionManager_HTTP2 HttpConnectionManager_CodecType = 2
)

var HttpConnectionManager_CodecType_name = map[int32]string{
	0: "AUTO",
	1: "HTTP1",
	2: "HTTP2",
}

var HttpConnectionManager_CodecType_value = map[string]int32{
	"AUTO":  0,
	"HTTP1": 1,
	"HTTP2": 2,
}

func (x HttpConnectionManager_CodecType) String() string {
	return proto.EnumName(HttpConnectionManager_CodecType_name, int32(x))
}

func (HttpConnectionManager_CodecType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8fe65268985a88f7, []int{0, 0}
}

// How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
// header.
type HttpConnectionManager_ForwardClientCertDetails int32

const (
	// Do not send the XFCC header to the next hop. This is the default value.
	HttpConnectionManager_SANITIZE HttpConnectionManager_ForwardClientCertDetails = 0
	// When the client connection is mTLS (Mutual TLS), forward the XFCC header
	// in the request.
	HttpConnectionManager_FORWARD_ONLY HttpConnectionManager_ForwardClientCertDetails = 1
	// When the client connection is mTLS, append the client certificate
	// information to the request’s XFCC header and forward it.
	HttpConnectionManager_APPEND_FORWARD HttpConnectionManager_ForwardClientCertDetails = 2
	// When the client connection is mTLS, reset the XFCC header with the client
	// certificate information and send it to the next hop.
	HttpConnectionManager_SANITIZE_SET HttpConnectionManager_ForwardClientCertDetails = 3
	// Always forward the XFCC header in the request, regardless of whether the
	// client connection is mTLS.
	HttpConnectionManager_ALWAYS_FORWARD_ONLY HttpConnectionManager_ForwardClientCertDetails = 4
)

var HttpConnectionManager_ForwardClientCertDetails_name = map[int32]string{
	0: "SANITIZE",
	1: "FORWARD_ONLY",
	2: "APPEND_FORWARD",
	3: "SANITIZE_SET",
	4: "ALWAYS_FORWARD_ONLY",
}

var HttpConnectionManager_ForwardClientCertDetails_value = map[string]int32{
	"SANITIZE":            0,
	"FORWARD_ONLY":        1,
	"APPEND_FORWARD":      2,
	"SANITIZE_SET":        3,
	"ALWAYS_FORWARD_ONLY": 4,
}

func (x HttpConnectionManager_ForwardClientCertDetails) String() string {
	return proto.EnumName(HttpConnectionManager_ForwardClientCertDetails_name, int32(x))
}

func (HttpConnectionManager_ForwardClientCertDetails) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8fe65268985a88f7, []int{0, 1}
}

type HttpConnectionManager_Tracing_OperationName int32

const (
	// The HTTP listener is used for ingress/incoming requests.
	HttpConnectionManager_Tracing_INGRESS HttpConnectionManager_Tracing_OperationName = 0
	// The HTTP listener is used for egress/outgoing requests.
	HttpConnectionManager_Tracing_EGRESS HttpConnectionManager_Tracing_OperationName = 1
)

var HttpConnectionManager_Tracing_OperationName_name = map[int32]string{
	0: "INGRESS",
	1: "EGRESS",
}

var HttpConnectionManager_Tracing_OperationName_value = map[string]int32{
	"INGRESS": 0,
	"EGRESS":  1,
}

func (x HttpConnectionManager_Tracing_OperationName) String() string {
	return proto.EnumName(HttpConnectionManager_Tracing_OperationName_name, int32(x))
}

func (HttpConnectionManager_Tracing_OperationName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8fe65268985a88f7, []int{0, 0, 0}
}

// [#comment:next free field: 31]
type HttpConnectionManager struct {
	// Supplies the type of codec that the connection manager should use.
	CodecType HttpConnectionManager_CodecType `protobuf:"varint,1,opt,name=codec_type,json=codecType,proto3,enum=envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager_CodecType" json:"codec_type,omitempty"`
	// The human readable prefix to use when emitting statistics for the
	// connection manager. See the :ref:`statistics documentation <config_http_conn_man_stats>` for
	// more information.
	StatPrefix string `protobuf:"bytes,2,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// Types that are valid to be assigned to RouteSpecifier:
	//	*HttpConnectionManager_Rds
	//	*HttpConnectionManager_RouteConfig
	RouteSpecifier isHttpConnectionManager_RouteSpecifier `protobuf_oneof:"route_specifier"`
	// A list of individual HTTP filters that make up the filter chain for
	// requests made to the connection manager. Order matters as the filters are
	// processed sequentially as request events happen.
	HttpFilters []*HttpFilter `protobuf:"bytes,5,rep,name=http_filters,json=httpFilters,proto3" json:"http_filters,omitempty"`
	// Whether the connection manager manipulates the :ref:`config_http_conn_man_headers_user-agent`
	// and :ref:`config_http_conn_man_headers_downstream-service-cluster` headers. See the linked
	// documentation for more information. Defaults to false.
	AddUserAgent *wrappers.BoolValue `protobuf:"bytes,6,opt,name=add_user_agent,json=addUserAgent,proto3" json:"add_user_agent,omitempty"`
	// Presence of the object defines whether the connection manager
	// emits :ref:`tracing <arch_overview_tracing>` data to the :ref:`configured tracing provider
	// <envoy_api_msg_config.trace.v2.Tracing>`.
	Tracing *HttpConnectionManager_Tracing `protobuf:"bytes,7,opt,name=tracing,proto3" json:"tracing,omitempty"`
	// Additional HTTP/1 settings that are passed to the HTTP/1 codec.
	HttpProtocolOptions *core.Http1ProtocolOptions `protobuf:"bytes,8,opt,name=http_protocol_options,json=httpProtocolOptions,proto3" json:"http_protocol_options,omitempty"`
	// Additional HTTP/2 settings that are passed directly to the HTTP/2 codec.
	Http2ProtocolOptions *core.Http2ProtocolOptions `protobuf:"bytes,9,opt,name=http2_protocol_options,json=http2ProtocolOptions,proto3" json:"http2_protocol_options,omitempty"`
	// An optional override that the connection manager will write to the server
	// header in responses. If not set, the default is *envoy*.
	ServerName string `protobuf:"bytes,10,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// The maximum request headers size for incoming connections.
	// If unconfigured, the default max request headers allowed is 60 KiB.
	// Requests that exceed this limit will receive a 431 response.
	// The max configurable limit is 96 KiB, based on current implementation
	// constraints.
	MaxRequestHeadersKb *wrappers.UInt32Value `protobuf:"bytes,29,opt,name=max_request_headers_kb,json=maxRequestHeadersKb,proto3" json:"max_request_headers_kb,omitempty"`
	// The idle timeout for connections managed by the connection manager. The
	// idle timeout is defined as the period in which there are no active
	// requests. If not set, there is no idle timeout. When the idle timeout is
	// reached the connection will be closed. If the connection is an HTTP/2
	// connection a drain sequence will occur prior to closing the connection. See
	// :ref:`drain_timeout
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout>`.
	IdleTimeout *duration.Duration `protobuf:"bytes,11,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// The stream idle timeout for connections managed by the connection manager.
	// If not specified, this defaults to 5 minutes. The default value was selected
	// so as not to interfere with any smaller configured timeouts that may have
	// existed in configurations prior to the introduction of this feature, while
	// introducing robustness to TCP connections that terminate without a FIN.
	//
	// This idle timeout applies to new streams and is overridable by the
	// :ref:`route-level idle_timeout
	// <envoy_api_field_route.RouteAction.idle_timeout>`. Even on a stream in
	// which the override applies, prior to receipt of the initial request
	// headers, the :ref:`stream_idle_timeout
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.stream_idle_timeout>`
	// applies. Each time an encode/decode event for headers or data is processed
	// for the stream, the timer will be reset. If the timeout fires, the stream
	// is terminated with a 408 Request Timeout error code if no upstream response
	// header has been received, otherwise a stream reset occurs.
	//
	// Note that it is possible to idle timeout even if the wire traffic for a stream is non-idle, due
	// to the granularity of events presented to the connection manager. For example, while receiving
	// very large request headers, it may be the case that there is traffic regularly arriving on the
	// wire while the connection manage is only able to observe the end-of-headers event, hence the
	// stream may still idle timeout.
	//
	// A value of 0 will completely disable the connection manager stream idle
	// timeout, although per-route idle timeout overrides will continue to apply.
	StreamIdleTimeout *duration.Duration `protobuf:"bytes,24,opt,name=stream_idle_timeout,json=streamIdleTimeout,proto3" json:"stream_idle_timeout,omitempty"`
	// A timeout for idle requests managed by the connection manager.
	// The timer is activated when the request is initiated, and is disarmed when the last byte of the
	// request is sent upstream (i.e. all decoding filters have processed the request), OR when the
	// response is initiated. If not specified or set to 0, this timeout is disabled.
	RequestTimeout *duration.Duration `protobuf:"bytes,28,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	// The time that Envoy will wait between sending an HTTP/2 “shutdown
	// notification” (GOAWAY frame with max stream ID) and a final GOAWAY frame.
	// This is used so that Envoy provides a grace period for new streams that
	// race with the final GOAWAY frame. During this grace period, Envoy will
	// continue to accept new streams. After the grace period, a final GOAWAY
	// frame is sent and Envoy will start refusing new streams. Draining occurs
	// both when a connection hits the idle timeout or during general server
	// draining. The default grace period is 5000 milliseconds (5 seconds) if this
	// option is not specified.
	DrainTimeout *duration.Duration `protobuf:"bytes,12,opt,name=drain_timeout,json=drainTimeout,proto3" json:"drain_timeout,omitempty"`
	// The delayed close timeout is for downstream connections managed by the HTTP connection manager.
	// It is defined as a grace period after connection close processing has been locally initiated
	// during which Envoy will flush the write buffers for the connection and await the peer to close
	// (i.e., a TCP FIN/RST is received by Envoy from the downstream connection).
	//
	// Delaying Envoy's connection close and giving the peer the opportunity to initiate the close
	// sequence mitigates a race condition that exists when downstream clients do not drain/process
	// data in a connection's receive buffer after a remote close has been detected via a socket
	// write(). This race leads to such clients failing to process the response code sent by Envoy,
	// which could result in erroneous downstream processing.
	//
	// If the timeout triggers, Envoy will close the connection's socket.
	//
	// The default timeout is 1000 ms if this option is not specified.
	//
	// A value of 0 will completely disable delayed close processing, and the downstream connection's
	// socket will be closed immediately after the write flush is completed.
	DelayedCloseTimeout *duration.Duration `protobuf:"bytes,26,opt,name=delayed_close_timeout,json=delayedCloseTimeout,proto3" json:"delayed_close_timeout,omitempty"`
	// Configuration for :ref:`HTTP access logs <arch_overview_access_logs>`
	// emitted by the connection manager.
	AccessLog []*v21.AccessLog `protobuf:"bytes,13,rep,name=access_log,json=accessLog,proto3" json:"access_log,omitempty"`
	// If set to true, the connection manager will use the real remote address
	// of the client connection when determining internal versus external origin and manipulating
	// various headers. If set to false or absent, the connection manager will use the
	// :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header. See the documentation for
	// :ref:`config_http_conn_man_headers_x-forwarded-for`,
	// :ref:`config_http_conn_man_headers_x-envoy-internal`, and
	// :ref:`config_http_conn_man_headers_x-envoy-external-address` for more information.
	UseRemoteAddress *wrappers.BoolValue `protobuf:"bytes,14,opt,name=use_remote_address,json=useRemoteAddress,proto3" json:"use_remote_address,omitempty"`
	// The number of additional ingress proxy hops from the right side of the
	// :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header to trust when
	// determining the origin client's IP address. The default is zero if this option
	// is not specified. See the documentation for
	// :ref:`config_http_conn_man_headers_x-forwarded-for` for more information.
	XffNumTrustedHops uint32 `protobuf:"varint,19,opt,name=xff_num_trusted_hops,json=xffNumTrustedHops,proto3" json:"xff_num_trusted_hops,omitempty"`
	// Configures what network addresses are considered internal for stats and header sanitation
	// purposes. If unspecified, only RFC1918 IP addresses will be considered internal.
	// See the documentation for :ref:`config_http_conn_man_headers_x-envoy-internal` for more
	// information about internal/external addresses.
	InternalAddressConfig *HttpConnectionManager_InternalAddressConfig `protobuf:"bytes,25,opt,name=internal_address_config,json=internalAddressConfig,proto3" json:"internal_address_config,omitempty"`
	// If set, Envoy will not append the remote address to the
	// :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header. This may be used in
	// conjunction with HTTP filters that explicitly manipulate XFF after the HTTP connection manager
	// has mutated the request headers. While :ref:`use_remote_address
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.use_remote_address>`
	// will also suppress XFF addition, it has consequences for logging and other
	// Envoy uses of the remote address, so *skip_xff_append* should be used
	// when only an elision of XFF addition is intended.
	SkipXffAppend bool `protobuf:"varint,21,opt,name=skip_xff_append,json=skipXffAppend,proto3" json:"skip_xff_append,omitempty"`
	// Via header value to append to request and response headers. If this is
	// empty, no via header will be appended.
	Via string `protobuf:"bytes,22,opt,name=via,proto3" json:"via,omitempty"`
	// Whether the connection manager will generate the :ref:`x-request-id
	// <config_http_conn_man_headers_x-request-id>` header if it does not exist. This defaults to
	// true. Generating a random UUID4 is expensive so in high throughput scenarios where this feature
	// is not desired it can be disabled.
	GenerateRequestId *wrappers.BoolValue `protobuf:"bytes,15,opt,name=generate_request_id,json=generateRequestId,proto3" json:"generate_request_id,omitempty"`
	// How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
	// header.
	ForwardClientCertDetails HttpConnectionManager_ForwardClientCertDetails `protobuf:"varint,16,opt,name=forward_client_cert_details,json=forwardClientCertDetails,proto3,enum=envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager_ForwardClientCertDetails" json:"forward_client_cert_details,omitempty"`
	// This field is valid only when :ref:`forward_client_cert_details
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.forward_client_cert_details>`
	// is APPEND_FORWARD or SANITIZE_SET and the client connection is mTLS. It specifies the fields in
	// the client certificate to be forwarded. Note that in the
	// :ref:`config_http_conn_man_headers_x-forwarded-client-cert` header, *Hash* is always set, and
	// *By* is always set when the client certificate presents the URI type Subject Alternative Name
	// value.
	SetCurrentClientCertDetails *HttpConnectionManager_SetCurrentClientCertDetails `protobuf:"bytes,17,opt,name=set_current_client_cert_details,json=setCurrentClientCertDetails,proto3" json:"set_current_client_cert_details,omitempty"`
	// If proxy_100_continue is true, Envoy will proxy incoming "Expect:
	// 100-continue" headers upstream, and forward "100 Continue" responses
	// downstream. If this is false or not set, Envoy will instead strip the
	// "Expect: 100-continue" header, and send a "100 Continue" response itself.
	Proxy_100Continue bool `protobuf:"varint,18,opt,name=proxy_100_continue,json=proxy100Continue,proto3" json:"proxy_100_continue,omitempty"`
	// If
	// :ref:`use_remote_address
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.use_remote_address>`
	// is true and represent_ipv4_remote_address_as_ipv4_mapped_ipv6 is true and the remote address is
	// an IPv4 address, the address will be mapped to IPv6 before it is appended to *x-forwarded-for*.
	// This is useful for testing compatibility of upstream services that parse the header value. For
	// example, 50.0.0.1 is represented as ::FFFF:50.0.0.1. See `IPv4-Mapped IPv6 Addresses
	// <https://tools.ietf.org/html/rfc4291#section-2.5.5.2>`_ for details. This will also affect the
	// :ref:`config_http_conn_man_headers_x-envoy-external-address` header. See
	// :ref:`http_connection_manager.represent_ipv4_remote_address_as_ipv4_mapped_ipv6
	// <config_http_conn_man_runtime_represent_ipv4_remote_address_as_ipv4_mapped_ipv6>` for runtime
	// control.
	RepresentIpv4RemoteAddressAsIpv4MappedIpv6 bool                                   `protobuf:"varint,20,opt,name=represent_ipv4_remote_address_as_ipv4_mapped_ipv6,json=representIpv4RemoteAddressAsIpv4MappedIpv6,proto3" json:"represent_ipv4_remote_address_as_ipv4_mapped_ipv6,omitempty"`
	UpgradeConfigs                             []*HttpConnectionManager_UpgradeConfig `protobuf:"bytes,23,rep,name=upgrade_configs,json=upgradeConfigs,proto3" json:"upgrade_configs,omitempty"`
	// Should paths be normalized according to RFC 3986 before any processing of
	// requests by HTTP filters or routing? This affects the upstream *:path* header
	// as well. For paths that fail this check, Envoy will respond with 400 to
	// paths that are malformed. This defaults to false currently but will default
	// true in the future. When not specified, this value may be overridden by the
	// runtime variable
	// :ref:`http_connection_manager.normalize_path<config_http_conn_man_runtime_normalize_path>`.
	// See `Normalization and Comparison <https://tools.ietf.org/html/rfc3986#section-6>`
	// for details of normalization.
	// Note that Envoy does not perform
	// `case normalization <https://tools.ietf.org/html/rfc3986#section-6.2.2.1>`
	NormalizePath        *wrappers.BoolValue `protobuf:"bytes,30,opt,name=normalize_path,json=normalizePath,proto3" json:"normalize_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *HttpConnectionManager) Reset()         { *m = HttpConnectionManager{} }
func (m *HttpConnectionManager) String() string { return proto.CompactTextString(m) }
func (*HttpConnectionManager) ProtoMessage()    {}
func (*HttpConnectionManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe65268985a88f7, []int{0}
}

func (m *HttpConnectionManager) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpConnectionManager.Unmarshal(m, b)
}
func (m *HttpConnectionManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpConnectionManager.Marshal(b, m, deterministic)
}
func (m *HttpConnectionManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpConnectionManager.Merge(m, src)
}
func (m *HttpConnectionManager) XXX_Size() int {
	return xxx_messageInfo_HttpConnectionManager.Size(m)
}
func (m *HttpConnectionManager) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpConnectionManager.DiscardUnknown(m)
}

var xxx_messageInfo_HttpConnectionManager proto.InternalMessageInfo

func (m *HttpConnectionManager) GetCodecType() HttpConnectionManager_CodecType {
	if m != nil {
		return m.CodecType
	}
	return HttpConnectionManager_AUTO
}

func (m *HttpConnectionManager) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

type isHttpConnectionManager_RouteSpecifier interface {
	isHttpConnectionManager_RouteSpecifier()
}

type HttpConnectionManager_Rds struct {
	Rds *Rds `protobuf:"bytes,3,opt,name=rds,proto3,oneof"`
}

type HttpConnectionManager_RouteConfig struct {
	RouteConfig *v2.RouteConfiguration `protobuf:"bytes,4,opt,name=route_config,json=routeConfig,proto3,oneof"`
}

func (*HttpConnectionManager_Rds) isHttpConnectionManager_RouteSpecifier() {}

func (*HttpConnectionManager_RouteConfig) isHttpConnectionManager_RouteSpecifier() {}

func (m *HttpConnectionManager) GetRouteSpecifier() isHttpConnectionManager_RouteSpecifier {
	if m != nil {
		return m.RouteSpecifier
	}
	return nil
}

func (m *HttpConnectionManager) GetRds() *Rds {
	if x, ok := m.GetRouteSpecifier().(*HttpConnectionManager_Rds); ok {
		return x.Rds
	}
	return nil
}

func (m *HttpConnectionManager) GetRouteConfig() *v2.RouteConfiguration {
	if x, ok := m.GetRouteSpecifier().(*HttpConnectionManager_RouteConfig); ok {
		return x.RouteConfig
	}
	return nil
}

func (m *HttpConnectionManager) GetHttpFilters() []*HttpFilter {
	if m != nil {
		return m.HttpFilters
	}
	return nil
}

func (m *HttpConnectionManager) GetAddUserAgent() *wrappers.BoolValue {
	if m != nil {
		return m.AddUserAgent
	}
	return nil
}

func (m *HttpConnectionManager) GetTracing() *HttpConnectionManager_Tracing {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *HttpConnectionManager) GetHttpProtocolOptions() *core.Http1ProtocolOptions {
	if m != nil {
		return m.HttpProtocolOptions
	}
	return nil
}

func (m *HttpConnectionManager) GetHttp2ProtocolOptions() *core.Http2ProtocolOptions {
	if m != nil {
		return m.Http2ProtocolOptions
	}
	return nil
}

func (m *HttpConnectionManager) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *HttpConnectionManager) GetMaxRequestHeadersKb() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxRequestHeadersKb
	}
	return nil
}

func (m *HttpConnectionManager) GetIdleTimeout() *duration.Duration {
	if m != nil {
		return m.IdleTimeout
	}
	return nil
}

func (m *HttpConnectionManager) GetStreamIdleTimeout() *duration.Duration {
	if m != nil {
		return m.StreamIdleTimeout
	}
	return nil
}

func (m *HttpConnectionManager) GetRequestTimeout() *duration.Duration {
	if m != nil {
		return m.RequestTimeout
	}
	return nil
}

func (m *HttpConnectionManager) GetDrainTimeout() *duration.Duration {
	if m != nil {
		return m.DrainTimeout
	}
	return nil
}

func (m *HttpConnectionManager) GetDelayedCloseTimeout() *duration.Duration {
	if m != nil {
		return m.DelayedCloseTimeout
	}
	return nil
}

func (m *HttpConnectionManager) GetAccessLog() []*v21.AccessLog {
	if m != nil {
		return m.AccessLog
	}
	return nil
}

func (m *HttpConnectionManager) GetUseRemoteAddress() *wrappers.BoolValue {
	if m != nil {
		return m.UseRemoteAddress
	}
	return nil
}

func (m *HttpConnectionManager) GetXffNumTrustedHops() uint32 {
	if m != nil {
		return m.XffNumTrustedHops
	}
	return 0
}

func (m *HttpConnectionManager) GetInternalAddressConfig() *HttpConnectionManager_InternalAddressConfig {
	if m != nil {
		return m.InternalAddressConfig
	}
	return nil
}

func (m *HttpConnectionManager) GetSkipXffAppend() bool {
	if m != nil {
		return m.SkipXffAppend
	}
	return false
}

func (m *HttpConnectionManager) GetVia() string {
	if m != nil {
		return m.Via
	}
	return ""
}

func (m *HttpConnectionManager) GetGenerateRequestId() *wrappers.BoolValue {
	if m != nil {
		return m.GenerateRequestId
	}
	return nil
}

func (m *HttpConnectionManager) GetForwardClientCertDetails() HttpConnectionManager_ForwardClientCertDetails {
	if m != nil {
		return m.ForwardClientCertDetails
	}
	return HttpConnectionManager_SANITIZE
}

func (m *HttpConnectionManager) GetSetCurrentClientCertDetails() *HttpConnectionManager_SetCurrentClientCertDetails {
	if m != nil {
		return m.SetCurrentClientCertDetails
	}
	return nil
}

func (m *HttpConnectionManager) GetProxy_100Continue() bool {
	if m != nil {
		return m.Proxy_100Continue
	}
	return false
}

func (m *HttpConnectionManager) GetRepresentIpv4RemoteAddressAsIpv4MappedIpv6() bool {
	if m != nil {
		return m.RepresentIpv4RemoteAddressAsIpv4MappedIpv6
	}
	return false
}

func (m *HttpConnectionManager) GetUpgradeConfigs() []*HttpConnectionManager_UpgradeConfig {
	if m != nil {
		return m.UpgradeConfigs
	}
	return nil
}

func (m *HttpConnectionManager) GetNormalizePath() *wrappers.BoolValue {
	if m != nil {
		return m.NormalizePath
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HttpConnectionManager) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HttpConnectionManager_Rds)(nil),
		(*HttpConnectionManager_RouteConfig)(nil),
	}
}

type HttpConnectionManager_Tracing struct {
	// The span name will be derived from this field.
	OperationName HttpConnectionManager_Tracing_OperationName `protobuf:"varint,1,opt,name=operation_name,json=operationName,proto3,enum=envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager_Tracing_OperationName" json:"operation_name,omitempty"`
	// A list of header names used to create tags for the active span. The header name is used to
	// populate the tag name, and the header value is used to populate the tag value. The tag is
	// created if the specified header name is present in the request's headers.
	RequestHeadersForTags []string `protobuf:"bytes,2,rep,name=request_headers_for_tags,json=requestHeadersForTags,proto3" json:"request_headers_for_tags,omitempty"`
	// Target percentage of requests managed by this HTTP connection manager that will be force
	// traced if the :ref:`x-client-trace-id <config_http_conn_man_headers_x-client-trace-id>`
	// header is set. This field is a direct analog for the runtime variable
	// 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
	// <config_http_conn_man_runtime>`.
	// Default: 100%
	ClientSampling *_type.Percent `protobuf:"bytes,3,opt,name=client_sampling,json=clientSampling,proto3" json:"client_sampling,omitempty"`
	// Target percentage of requests managed by this HTTP connection manager that will be randomly
	// selected for trace generation, if not requested by the client or not forced. This field is
	// a direct analog for the runtime variable 'tracing.random_sampling' in the
	// :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
	// Default: 100%
	RandomSampling *_type.Percent `protobuf:"bytes,4,opt,name=random_sampling,json=randomSampling,proto3" json:"random_sampling,omitempty"`
	// Target percentage of requests managed by this HTTP connection manager that will be traced
	// after all other sampling checks have been applied (client-directed, force tracing, random
	// sampling). This field functions as an upper limit on the total configured sampling rate. For
	// instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
	// of client requests with the appropriate headers to be force traced. This field is a direct
	// analog for the runtime variable 'tracing.global_enabled' in the
	// :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
	// Default: 100%
	OverallSampling *_type.Percent `protobuf:"bytes,5,opt,name=overall_sampling,json=overallSampling,proto3" json:"overall_sampling,omitempty"`
	// Whether to annotate spans with additional data. If true, spans will include logs for stream
	// events.
	Verbose              bool     `protobuf:"varint,6,opt,name=verbose,proto3" json:"verbose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpConnectionManager_Tracing) Reset()         { *m = HttpConnectionManager_Tracing{} }
func (m *HttpConnectionManager_Tracing) String() string { return proto.CompactTextString(m) }
func (*HttpConnectionManager_Tracing) ProtoMessage()    {}
func (*HttpConnectionManager_Tracing) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe65268985a88f7, []int{0, 0}
}

func (m *HttpConnectionManager_Tracing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpConnectionManager_Tracing.Unmarshal(m, b)
}
func (m *HttpConnectionManager_Tracing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpConnectionManager_Tracing.Marshal(b, m, deterministic)
}
func (m *HttpConnectionManager_Tracing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpConnectionManager_Tracing.Merge(m, src)
}
func (m *HttpConnectionManager_Tracing) XXX_Size() int {
	return xxx_messageInfo_HttpConnectionManager_Tracing.Size(m)
}
func (m *HttpConnectionManager_Tracing) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpConnectionManager_Tracing.DiscardUnknown(m)
}

var xxx_messageInfo_HttpConnectionManager_Tracing proto.InternalMessageInfo

func (m *HttpConnectionManager_Tracing) GetOperationName() HttpConnectionManager_Tracing_OperationName {
	if m != nil {
		return m.OperationName
	}
	return HttpConnectionManager_Tracing_INGRESS
}

func (m *HttpConnectionManager_Tracing) GetRequestHeadersForTags() []string {
	if m != nil {
		return m.RequestHeadersForTags
	}
	return nil
}

func (m *HttpConnectionManager_Tracing) GetClientSampling() *_type.Percent {
	if m != nil {
		return m.ClientSampling
	}
	return nil
}

func (m *HttpConnectionManager_Tracing) GetRandomSampling() *_type.Percent {
	if m != nil {
		return m.RandomSampling
	}
	return nil
}

func (m *HttpConnectionManager_Tracing) GetOverallSampling() *_type.Percent {
	if m != nil {
		return m.OverallSampling
	}
	return nil
}

func (m *HttpConnectionManager_Tracing) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

type HttpConnectionManager_InternalAddressConfig struct {
	// Whether unix socket addresses should be considered internal.
	UnixSockets          bool     `protobuf:"varint,1,opt,name=unix_sockets,json=unixSockets,proto3" json:"unix_sockets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpConnectionManager_InternalAddressConfig) Reset() {
	*m = HttpConnectionManager_InternalAddressConfig{}
}
func (m *HttpConnectionManager_InternalAddressConfig) String() string {
	return proto.CompactTextString(m)
}
func (*HttpConnectionManager_InternalAddressConfig) ProtoMessage() {}
func (*HttpConnectionManager_InternalAddressConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe65268985a88f7, []int{0, 1}
}

func (m *HttpConnectionManager_InternalAddressConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpConnectionManager_InternalAddressConfig.Unmarshal(m, b)
}
func (m *HttpConnectionManager_InternalAddressConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpConnectionManager_InternalAddressConfig.Marshal(b, m, deterministic)
}
func (m *HttpConnectionManager_InternalAddressConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpConnectionManager_InternalAddressConfig.Merge(m, src)
}
func (m *HttpConnectionManager_InternalAddressConfig) XXX_Size() int {
	return xxx_messageInfo_HttpConnectionManager_InternalAddressConfig.Size(m)
}
func (m *HttpConnectionManager_InternalAddressConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpConnectionManager_InternalAddressConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HttpConnectionManager_InternalAddressConfig proto.InternalMessageInfo

func (m *HttpConnectionManager_InternalAddressConfig) GetUnixSockets() bool {
	if m != nil {
		return m.UnixSockets
	}
	return false
}

type HttpConnectionManager_SetCurrentClientCertDetails struct {
	// Whether to forward the subject of the client cert. Defaults to false.
	Subject *wrappers.BoolValue `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// Whether to forward the entire client cert in URL encoded PEM format. This will appear in the
	// XFCC header comma separated from other values with the value Cert="PEM".
	// Defaults to false.
	Cert bool `protobuf:"varint,3,opt,name=cert,proto3" json:"cert,omitempty"`
	// Whether to forward the DNS type Subject Alternative Names of the client cert.
	// Defaults to false.
	Dns bool `protobuf:"varint,4,opt,name=dns,proto3" json:"dns,omitempty"`
	// Whether to forward the URI type Subject Alternative Name of the client cert. Defaults to
	// false.
	Uri                  bool     `protobuf:"varint,5,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) Reset() {
	*m = HttpConnectionManager_SetCurrentClientCertDetails{}
}
func (m *HttpConnectionManager_SetCurrentClientCertDetails) String() string {
	return proto.CompactTextString(m)
}
func (*HttpConnectionManager_SetCurrentClientCertDetails) ProtoMessage() {}
func (*HttpConnectionManager_SetCurrentClientCertDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe65268985a88f7, []int{0, 2}
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpConnectionManager_SetCurrentClientCertDetails.Unmarshal(m, b)
}
func (m *HttpConnectionManager_SetCurrentClientCertDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpConnectionManager_SetCurrentClientCertDetails.Marshal(b, m, deterministic)
}
func (m *HttpConnectionManager_SetCurrentClientCertDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpConnectionManager_SetCurrentClientCertDetails.Merge(m, src)
}
func (m *HttpConnectionManager_SetCurrentClientCertDetails) XXX_Size() int {
	return xxx_messageInfo_HttpConnectionManager_SetCurrentClientCertDetails.Size(m)
}
func (m *HttpConnectionManager_SetCurrentClientCertDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpConnectionManager_SetCurrentClientCertDetails.DiscardUnknown(m)
}

var xxx_messageInfo_HttpConnectionManager_SetCurrentClientCertDetails proto.InternalMessageInfo

func (m *HttpConnectionManager_SetCurrentClientCertDetails) GetSubject() *wrappers.BoolValue {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) GetCert() bool {
	if m != nil {
		return m.Cert
	}
	return false
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) GetDns() bool {
	if m != nil {
		return m.Dns
	}
	return false
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) GetUri() bool {
	if m != nil {
		return m.Uri
	}
	return false
}

// The configuration for HTTP upgrades.
// For each upgrade type desired, an UpgradeConfig must be added.
//
// .. warning::
//
//    The current implementation of upgrade headers does not handle
//    multi-valued upgrade headers. Support for multi-valued headers may be
//    added in the future if needed.
//
// .. warning::
//    The current implementation of upgrade headers does not work with HTTP/2
//    upstreams.
type HttpConnectionManager_UpgradeConfig struct {
	// The case-insensitive name of this upgrade, e.g. "websocket".
	// For each upgrade type present in upgrade_configs, requests with
	// Upgrade: [upgrade_type]
	// will be proxied upstream.
	UpgradeType string `protobuf:"bytes,1,opt,name=upgrade_type,json=upgradeType,proto3" json:"upgrade_type,omitempty"`
	// If present, this represents the filter chain which will be created for
	// this type of upgrade. If no filters are present, the filter chain for
	// HTTP connections will be used for this upgrade type.
	Filters []*HttpFilter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	// Determines if upgrades are enabled or disabled by default. Defaults to true.
	// This can be overridden on a per-route basis with :ref:`cluster
	// <envoy_api_field_route.RouteAction.upgrade_configs>` as documented in the
	// :ref:`upgrade documentation <arch_overview_websocket>`.
	Enabled              *wrappers.BoolValue `protobuf:"bytes,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *HttpConnectionManager_UpgradeConfig) Reset()         { *m = HttpConnectionManager_UpgradeConfig{} }
func (m *HttpConnectionManager_UpgradeConfig) String() string { return proto.CompactTextString(m) }
func (*HttpConnectionManager_UpgradeConfig) ProtoMessage()    {}
func (*HttpConnectionManager_UpgradeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe65268985a88f7, []int{0, 3}
}

func (m *HttpConnectionManager_UpgradeConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpConnectionManager_UpgradeConfig.Unmarshal(m, b)
}
func (m *HttpConnectionManager_UpgradeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpConnectionManager_UpgradeConfig.Marshal(b, m, deterministic)
}
func (m *HttpConnectionManager_UpgradeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpConnectionManager_UpgradeConfig.Merge(m, src)
}
func (m *HttpConnectionManager_UpgradeConfig) XXX_Size() int {
	return xxx_messageInfo_HttpConnectionManager_UpgradeConfig.Size(m)
}
func (m *HttpConnectionManager_UpgradeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpConnectionManager_UpgradeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HttpConnectionManager_UpgradeConfig proto.InternalMessageInfo

func (m *HttpConnectionManager_UpgradeConfig) GetUpgradeType() string {
	if m != nil {
		return m.UpgradeType
	}
	return ""
}

func (m *HttpConnectionManager_UpgradeConfig) GetFilters() []*HttpFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *HttpConnectionManager_UpgradeConfig) GetEnabled() *wrappers.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

type Rds struct {
	// Configuration source specifier for RDS.
	ConfigSource *core.ConfigSource `protobuf:"bytes,1,opt,name=config_source,json=configSource,proto3" json:"config_source,omitempty"`
	// The name of the route configuration. This name will be passed to the RDS
	// API. This allows an Envoy configuration with multiple HTTP listeners (and
	// associated HTTP connection manager filters) to use different route
	// configurations.
	RouteConfigName      string   `protobuf:"bytes,2,opt,name=route_config_name,json=routeConfigName,proto3" json:"route_config_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rds) Reset()         { *m = Rds{} }
func (m *Rds) String() string { return proto.CompactTextString(m) }
func (*Rds) ProtoMessage()    {}
func (*Rds) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe65268985a88f7, []int{1}
}

func (m *Rds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rds.Unmarshal(m, b)
}
func (m *Rds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rds.Marshal(b, m, deterministic)
}
func (m *Rds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rds.Merge(m, src)
}
func (m *Rds) XXX_Size() int {
	return xxx_messageInfo_Rds.Size(m)
}
func (m *Rds) XXX_DiscardUnknown() {
	xxx_messageInfo_Rds.DiscardUnknown(m)
}

var xxx_messageInfo_Rds proto.InternalMessageInfo

func (m *Rds) GetConfigSource() *core.ConfigSource {
	if m != nil {
		return m.ConfigSource
	}
	return nil
}

func (m *Rds) GetRouteConfigName() string {
	if m != nil {
		return m.RouteConfigName
	}
	return ""
}

type HttpFilter struct {
	// The name of the filter to instantiate. The name must match a supported
	// filter. The built-in filters are:
	//
	// [#comment:TODO(mattklein123): Auto generate the following list]
	// * :ref:`envoy.buffer <config_http_filters_buffer>`
	// * :ref:`envoy.cors <config_http_filters_cors>`
	// * :ref:`envoy.ext_authz <config_http_filters_ext_authz>`
	// * :ref:`envoy.fault <config_http_filters_fault_injection>`
	// * :ref:`envoy.filters.http.header_to_metadata <config_http_filters_header_to_metadata>`
	// * :ref:`envoy.filters.http.grpc_http1_reverse_bridge \
	//   <config_http_filters_grpc_http1_reverse_bridge>`
	// * :ref:`envoy.filters.http.jwt_authn <config_http_filters_jwt_authn>`
	// * :ref:`envoy.filters.http.rbac <config_http_filters_rbac>`
	// * :ref:`envoy.filters.http.tap <config_http_filters_tap>`
	// * :ref:`envoy.gzip <config_http_filters_gzip>`
	// * :ref:`envoy.http_dynamo_filter <config_http_filters_dynamo>`
	// * :ref:`envoy.grpc_http1_bridge <config_http_filters_grpc_bridge>`
	// * :ref:`envoy.grpc_json_transcoder <config_http_filters_grpc_json_transcoder>`
	// * :ref:`envoy.grpc_web <config_http_filters_grpc_web>`
	// * :ref:`envoy.health_check <config_http_filters_health_check>`
	// * :ref:`envoy.ip_tagging <config_http_filters_ip_tagging>`
	// * :ref:`envoy.lua <config_http_filters_lua>`
	// * :ref:`envoy.rate_limit <config_http_filters_rate_limit>`
	// * :ref:`envoy.router <config_http_filters_router>`
	// * :ref:`envoy.squash <config_http_filters_squash>`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Filter specific configuration which depends on the filter being instantiated. See the supported
	// filters for further documentation.
	//
	// Types that are valid to be assigned to ConfigType:
	//	*HttpFilter_Config
	//	*HttpFilter_TypedConfig
	ConfigType           isHttpFilter_ConfigType `protobuf_oneof:"config_type"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *HttpFilter) Reset()         { *m = HttpFilter{} }
func (m *HttpFilter) String() string { return proto.CompactTextString(m) }
func (*HttpFilter) ProtoMessage()    {}
func (*HttpFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe65268985a88f7, []int{2}
}

func (m *HttpFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpFilter.Unmarshal(m, b)
}
func (m *HttpFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpFilter.Marshal(b, m, deterministic)
}
func (m *HttpFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpFilter.Merge(m, src)
}
func (m *HttpFilter) XXX_Size() int {
	return xxx_messageInfo_HttpFilter.Size(m)
}
func (m *HttpFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpFilter.DiscardUnknown(m)
}

var xxx_messageInfo_HttpFilter proto.InternalMessageInfo

func (m *HttpFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isHttpFilter_ConfigType interface {
	isHttpFilter_ConfigType()
}

type HttpFilter_Config struct {
	Config *_struct.Struct `protobuf:"bytes,2,opt,name=config,proto3,oneof"`
}

type HttpFilter_TypedConfig struct {
	TypedConfig *any.Any `protobuf:"bytes,4,opt,name=typed_config,json=typedConfig,proto3,oneof"`
}

func (*HttpFilter_Config) isHttpFilter_ConfigType() {}

func (*HttpFilter_TypedConfig) isHttpFilter_ConfigType() {}

func (m *HttpFilter) GetConfigType() isHttpFilter_ConfigType {
	if m != nil {
		return m.ConfigType
	}
	return nil
}

func (m *HttpFilter) GetConfig() *_struct.Struct {
	if x, ok := m.GetConfigType().(*HttpFilter_Config); ok {
		return x.Config
	}
	return nil
}

func (m *HttpFilter) GetTypedConfig() *any.Any {
	if x, ok := m.GetConfigType().(*HttpFilter_TypedConfig); ok {
		return x.TypedConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HttpFilter) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HttpFilter_Config)(nil),
		(*HttpFilter_TypedConfig)(nil),
	}
}

func init() {
	proto.RegisterEnum("envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager_CodecType", HttpConnectionManager_CodecType_name, HttpConnectionManager_CodecType_value)
	proto.RegisterEnum("envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager_ForwardClientCertDetails", HttpConnectionManager_ForwardClientCertDetails_name, HttpConnectionManager_ForwardClientCertDetails_value)
	proto.RegisterEnum("envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager_Tracing_OperationName", HttpConnectionManager_Tracing_OperationName_name, HttpConnectionManager_Tracing_OperationName_value)
	proto.RegisterType((*HttpConnectionManager)(nil), "envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager")
	proto.RegisterType((*HttpConnectionManager_Tracing)(nil), "envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing")
	proto.RegisterType((*HttpConnectionManager_InternalAddressConfig)(nil), "envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.InternalAddressConfig")
	proto.RegisterType((*HttpConnectionManager_SetCurrentClientCertDetails)(nil), "envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails")
	proto.RegisterType((*HttpConnectionManager_UpgradeConfig)(nil), "envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.UpgradeConfig")
	proto.RegisterType((*Rds)(nil), "envoy.config.filter.network.http_connection_manager.v2.Rds")
	proto.RegisterType((*HttpFilter)(nil), "envoy.config.filter.network.http_connection_manager.v2.HttpFilter")
}

func init() {
	proto.RegisterFile("envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto", fileDescriptor_8fe65268985a88f7)
}

var fileDescriptor_8fe65268985a88f7 = []byte{
	// 1743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcd, 0x6f, 0x23, 0x49,
	0x15, 0x4f, 0xdb, 0xce, 0xc4, 0x79, 0xfe, 0x48, 0xa7, 0x92, 0x4c, 0x7a, 0x3d, 0xd9, 0x89, 0x89,
	0x04, 0x44, 0x03, 0xb2, 0x13, 0xef, 0x30, 0x88, 0x0f, 0x21, 0xec, 0x24, 0x43, 0x12, 0x66, 0x93,
	0xa8, 0xed, 0x30, 0xec, 0x2e, 0xa8, 0xa9, 0x74, 0x97, 0x9d, 0x66, 0xda, 0x5d, 0x4d, 0x55, 0xb5,
	0x27, 0xe1, 0x82, 0xb4, 0xe2, 0x80, 0xb8, 0xc1, 0x01, 0x21, 0x71, 0xe4, 0x0e, 0xe2, 0x06, 0x9c,
	0xf6, 0x84, 0xf8, 0x2b, 0x40, 0x1c, 0xf7, 0xbf, 0x40, 0xf5, 0xd1, 0x4e, 0x9c, 0xaf, 0x19, 0x0d,
	0xe1, 0x56, 0xf5, 0xde, 0xfb, 0xfd, 0xde, 0xab, 0x57, 0xef, 0xd5, 0x07, 0xf4, 0x48, 0x3c, 0xa2,
	0xe7, 0x4d, 0x9f, 0xc6, 0xfd, 0x70, 0xd0, 0xec, 0x87, 0x91, 0x20, 0xac, 0x19, 0x13, 0xf1, 0x9a,
	0xb2, 0x57, 0xcd, 0x53, 0x21, 0x12, 0xcf, 0xa7, 0x71, 0x4c, 0x7c, 0x11, 0xd2, 0xd8, 0x1b, 0xe2,
	0x18, 0x0f, 0x08, 0x6b, 0x8e, 0x5a, 0xb7, 0xa9, 0x1a, 0x09, 0xa3, 0x82, 0xa2, 0x67, 0x8a, 0xb5,
	0xa1, 0x59, 0x1b, 0x9a, 0xb5, 0x61, 0x58, 0x1b, 0xb7, 0x41, 0x47, 0xad, 0xda, 0x17, 0x75, 0x34,
	0x38, 0x09, 0xa5, 0x0f, 0x9f, 0x32, 0x62, 0x22, 0xf3, 0x38, 0x4d, 0x99, 0x4f, 0x34, 0x7d, 0xad,
	0x7e, 0xdd, 0x4c, 0x29, 0x7c, 0x1a, 0x19, 0x8b, 0x87, 0x13, 0x16, 0x2c, 0xe0, 0x46, 0xbe, 0x71,
	0xd3, 0x72, 0xb1, 0xef, 0x13, 0xce, 0x23, 0x3a, 0x90, 0xb6, 0xe3, 0x89, 0x41, 0x38, 0x1a, 0x21,
	0xce, 0x13, 0xd2, 0x4c, 0x08, 0xf3, 0x49, 0x2c, 0x8c, 0xe6, 0xbd, 0x01, 0xa5, 0x83, 0xc8, 0xb8,
	0x3e, 0x49, 0xfb, 0x4d, 0x1c, 0x9f, 0x1b, 0xd5, 0xe3, 0xab, 0xaa, 0x20, 0x65, 0x58, 0x2e, 0xd6,
	0xe8, 0x57, 0xae, 0xea, 0xb9, 0x60, 0xa9, 0x2f, 0x6e, 0x43, 0xbf, 0x66, 0x38, 0x49, 0x08, 0xcb,
	0x16, 0xb1, 0x3c, 0xc2, 0x51, 0x18, 0x60, 0x41, 0x9a, 0xd9, 0xc0, 0x28, 0x16, 0x07, 0x74, 0x40,
	0xd5, 0xb0, 0x29, 0x47, 0x5a, 0xba, 0xf6, 0xb7, 0x15, 0x58, 0xda, 0x15, 0x22, 0xd9, 0x1a, 0xa7,
	0xfc, 0x43, 0x9d, 0x71, 0xf4, 0xa9, 0x05, 0xe0, 0xd3, 0x80, 0xf8, 0x9e, 0x5c, 0x9e, 0x63, 0xd5,
	0xad, 0xf5, 0x6a, 0xeb, 0x65, 0xe3, 0xdd, 0x36, 0xaf, 0x71, 0xa3, 0x8f, 0xc6, 0x96, 0xe4, 0xef,
	0x9d, 0x27, 0xa4, 0x03, 0x7f, 0xff, 0xfc, 0xb3, 0xfc, 0xf4, 0xa7, 0x56, 0xce, 0xb6, 0xdc, 0x59,
	0x3f, 0x13, 0xa3, 0x27, 0x50, 0xe2, 0x02, 0x0b, 0x2f, 0x61, 0xa4, 0x1f, 0x9e, 0x39, 0xb9, 0xba,
	0xb5, 0x3e, 0xdb, 0x99, 0x95, 0xb6, 0x05, 0x96, 0xab, 0x5b, 0x2e, 0x48, 0xed, 0x91, 0x52, 0xa2,
	0x43, 0xc8, 0xb3, 0x80, 0x3b, 0xf9, 0xba, 0xb5, 0x5e, 0x6a, 0x7d, 0xeb, 0x5d, 0x03, 0x75, 0x03,
	0xbe, 0x3b, 0xe5, 0x4a, 0x26, 0xb4, 0x03, 0x65, 0x46, 0x53, 0x41, 0x3c, 0x4d, 0xe2, 0x14, 0x14,
	0x73, 0xdd, 0x30, 0xe3, 0x24, 0x54, 0xf6, 0xd2, 0x62, 0x4b, 0x19, 0x98, 0x6d, 0xdc, 0x9d, 0x72,
	0x4b, 0xec, 0x42, 0x8a, 0x08, 0x94, 0x95, 0x3f, 0x1d, 0x03, 0x77, 0xa6, 0xeb, 0xf9, 0xf5, 0x52,
	0xab, 0xf3, 0xbf, 0x64, 0xf2, 0xb9, 0xb2, 0x76, 0x4b, 0xa7, 0xe3, 0x31, 0x47, 0xdf, 0x85, 0x2a,
	0x0e, 0x02, 0x2f, 0xe5, 0x84, 0x79, 0x78, 0x40, 0x62, 0xe1, 0x3c, 0x50, 0xf1, 0xd6, 0x1a, 0xba,
	0x62, 0x1a, 0x59, 0xc5, 0x34, 0x3a, 0x94, 0x46, 0x3f, 0xc0, 0x51, 0x4a, 0xdc, 0x32, 0x0e, 0x82,
	0x63, 0x4e, 0x58, 0x5b, 0xda, 0x23, 0x0a, 0x33, 0x82, 0x61, 0x3f, 0x8c, 0x07, 0xce, 0x8c, 0x82,
	0x1e, 0xdf, 0xef, 0x6e, 0xf7, 0x34, 0xb9, 0x9b, 0x79, 0x41, 0x9f, 0xc0, 0x92, 0x22, 0xc9, 0xfa,
	0xd3, 0xa3, 0x89, 0xb4, 0xe7, 0x4e, 0x51, 0xb9, 0xff, 0xf2, 0x64, 0xa6, 0x65, 0x2b, 0x2b, 0xe6,
	0xcd, 0x23, 0x63, 0x7f, 0xa8, 0xcd, 0xdd, 0x05, 0xc9, 0x72, 0x45, 0x88, 0x7e, 0x0c, 0x0f, 0xa5,
	0xb8, 0x75, 0x9d, 0x7d, 0xf6, 0x4e, 0xf6, 0xd6, 0x55, 0xf6, 0xc5, 0xd3, 0x1b, 0xa4, 0x68, 0x15,
	0x4a, 0x9c, 0xb0, 0x11, 0x61, 0x5e, 0x8c, 0x87, 0xc4, 0x01, 0x59, 0x99, 0x2e, 0x68, 0xd1, 0x01,
	0x1e, 0x12, 0x44, 0xe0, 0xe1, 0x10, 0x9f, 0x79, 0x8c, 0xfc, 0x2c, 0x25, 0x5c, 0x78, 0xa7, 0x04,
	0x07, 0x84, 0x71, 0xef, 0xd5, 0x89, 0xf3, 0xbe, 0xf2, 0xbf, 0x72, 0x6d, 0x5f, 0x8e, 0xf7, 0x62,
	0xf1, 0x41, 0x4b, 0xed, 0x4c, 0x07, 0xa9, 0x1a, 0x7f, 0x92, 0xab, 0x4f, 0x99, 0x81, 0xf3, 0x13,
	0x77, 0x61, 0x88, 0xcf, 0x5c, 0x4d, 0xb7, 0xab, 0xd9, 0xbe, 0x7f, 0x82, 0x3a, 0x50, 0x0e, 0x83,
	0x88, 0x78, 0x22, 0x1c, 0x12, 0x9a, 0x0a, 0xa7, 0xa4, 0xc8, 0xdf, 0xbb, 0x46, 0xbe, 0x6d, 0xaa,
	0xb3, 0x53, 0xf8, 0xfd, 0xbf, 0x57, 0x2d, 0xb7, 0x24, 0x41, 0x3d, 0x8d, 0x41, 0x87, 0xb0, 0xc0,
	0x05, 0x23, 0x78, 0xe8, 0x4d, 0x50, 0x39, 0x6f, 0x47, 0x35, 0xaf, 0xb1, 0x7b, 0x97, 0x08, 0x77,
	0x61, 0x2e, 0x5b, 0x77, 0x46, 0xb6, 0xf2, 0x76, 0x64, 0x55, 0x83, 0xcb, 0x98, 0xb6, 0xa1, 0x12,
	0x30, 0x1c, 0xc6, 0x63, 0x9e, 0xf2, 0xdb, 0xf1, 0x94, 0x15, 0x2a, 0x63, 0xe9, 0xc2, 0x52, 0x40,
	0x22, 0x7c, 0x4e, 0x02, 0xcf, 0x8f, 0x28, 0xbf, 0x58, 0x62, 0xed, 0xed, 0xd8, 0x16, 0x0c, 0x7a,
	0x4b, 0x82, 0x33, 0xd2, 0x7d, 0x00, 0x7d, 0x1f, 0x78, 0x11, 0x1d, 0x38, 0x15, 0xd5, 0xd5, 0x5f,
	0xb9, 0xb1, 0x63, 0x2e, 0xae, 0x8d, 0x51, 0xab, 0xd1, 0x56, 0x93, 0x17, 0x74, 0xe0, 0xce, 0xe2,
	0x6c, 0x88, 0x76, 0x01, 0xa5, 0x9c, 0x78, 0x8c, 0x0c, 0xa9, 0x20, 0x1e, 0x0e, 0x02, 0x46, 0x38,
	0x77, 0xaa, 0x6f, 0x6c, 0x60, 0x3b, 0xe5, 0xc4, 0x55, 0xa0, 0xb6, 0xc6, 0xa0, 0x26, 0x2c, 0x9e,
	0xf5, 0xfb, 0x5e, 0x9c, 0x0e, 0x3d, 0xc1, 0x52, 0x2e, 0x48, 0xe0, 0x9d, 0xd2, 0x84, 0x3b, 0x0b,
	0x75, 0x6b, 0xbd, 0xe2, 0xce, 0x9f, 0xf5, 0xfb, 0x07, 0xe9, 0xb0, 0xa7, 0x35, 0xbb, 0x34, 0xe1,
	0xe8, 0x0f, 0x16, 0x2c, 0x87, 0xb1, 0x20, 0x2c, 0xc6, 0x51, 0xe6, 0x39, 0x3b, 0xf1, 0xde, 0x53,
	0x01, 0xf8, 0xf7, 0x7b, 0x0c, 0xec, 0x19, 0x67, 0x26, 0x62, 0x7d, 0x4a, 0xba, 0x4b, 0xe1, 0x4d,
	0x62, 0xf4, 0x25, 0x98, 0xe3, 0xaf, 0xc2, 0xc4, 0x93, 0x6b, 0x92, 0xf7, 0x5c, 0x1c, 0x38, 0x4b,
	0x75, 0x6b, 0xbd, 0xe8, 0x56, 0xa4, 0xf8, 0x87, 0xfd, 0x7e, 0x5b, 0x09, 0x91, 0x0d, 0xf9, 0x51,
	0x88, 0x9d, 0x87, 0xaa, 0x0d, 0xe5, 0x10, 0xed, 0xc3, 0xc2, 0x80, 0xc4, 0x84, 0x61, 0x41, 0xc6,
	0x4d, 0x18, 0x06, 0xce, 0xdc, 0x1b, 0x73, 0x3a, 0x9f, 0xc1, 0x4c, 0xaf, 0xed, 0x05, 0xe8, 0x2f,
	0x16, 0x3c, 0xea, 0x53, 0xf6, 0x1a, 0x33, 0x59, 0x40, 0x21, 0x89, 0x85, 0xe7, 0x13, 0x26, 0xbc,
	0x80, 0x08, 0x1c, 0x46, 0xdc, 0xb1, 0xd5, 0xe5, 0xd8, 0xbf, 0xdf, 0x3c, 0x3d, 0xd7, 0x0e, 0xb7,
	0x94, 0xbf, 0x2d, 0xc2, 0xc4, 0xb6, 0xf6, 0x36, 0x71, 0x57, 0x3a, 0xfd, 0x5b, 0xac, 0xd0, 0x9f,
	0x2d, 0x58, 0xe5, 0x44, 0x78, 0x7e, 0xca, 0x98, 0x0a, 0xf8, 0x86, 0xb8, 0xe7, 0x55, 0x32, 0xc2,
	0xfb, 0x8d, 0xbb, 0x4b, 0xc4, 0x96, 0xf6, 0x79, 0x2d, 0x28, 0xf7, 0x11, 0xbf, 0x5d, 0x89, 0xbe,
	0x0a, 0x28, 0x61, 0xf4, 0xec, 0xdc, 0xdb, 0xdc, 0xd8, 0x90, 0x1e, 0x45, 0x18, 0xa7, 0xc4, 0x41,
	0x6a, 0xbb, 0x6d, 0xa5, 0xd9, 0xdc, 0xd8, 0xd8, 0x32, 0x72, 0x44, 0x60, 0x93, 0x91, 0x84, 0x11,
	0x2e, 0x57, 0x15, 0x26, 0xa3, 0xa7, 0x57, 0xba, 0xc7, 0xc3, 0x5c, 0x8b, 0x87, 0xb2, 0x6e, 0x02,
	0x39, 0x7e, 0xe6, 0x2c, 0x2a, 0xb2, 0x27, 0x63, 0xe0, 0x5e, 0x32, 0x7a, 0x3a, 0xd1, 0x3f, 0x6d,
	0x2e, 0x45, 0x1f, 0x2a, 0xc8, 0x5e, 0x32, 0x7a, 0x86, 0x7e, 0x69, 0xc1, 0x5c, 0x9a, 0x0c, 0x18,
	0x0e, 0xb2, 0x77, 0x00, 0x77, 0x96, 0x55, 0xaf, 0x7f, 0x72, 0xbf, 0x69, 0x3b, 0xd6, 0x4e, 0x4c,
	0x3b, 0x54, 0xd3, 0xcb, 0x53, 0x8e, 0xda, 0x50, 0x8d, 0x29, 0x1b, 0xe2, 0x28, 0xfc, 0x39, 0xf1,
	0x12, 0x2c, 0x4e, 0x9d, 0xc7, 0x6f, 0x2c, 0xe4, 0xca, 0x18, 0x71, 0x84, 0xc5, 0x69, 0xed, 0x3f,
	0x79, 0x98, 0x31, 0x57, 0x30, 0xfa, 0x9d, 0x05, 0x55, 0x9a, 0x10, 0x7d, 0xc8, 0xe9, 0x1b, 0x4c,
	0x3f, 0xf0, 0xfc, 0xff, 0xcb, 0x95, 0xdf, 0x38, 0xcc, 0x7c, 0xc9, 0xab, 0x71, 0xa2, 0x80, 0x2b,
	0xf4, 0xb2, 0x0a, 0x7d, 0x1d, 0x9c, 0xab, 0x37, 0x66, 0x9f, 0x32, 0x4f, 0xe0, 0x01, 0x77, 0x72,
	0xf5, 0xfc, 0xfa, 0xac, 0xbb, 0xc4, 0x26, 0xae, 0xc0, 0xe7, 0x94, 0xf5, 0xf0, 0x80, 0xa3, 0x6f,
	0xc3, 0x9c, 0xa9, 0x70, 0x8e, 0x87, 0x49, 0x24, 0x1f, 0x31, 0xfa, 0x25, 0xb8, 0x60, 0x56, 0x24,
	0x5f, 0xb1, 0x8d, 0x23, 0xfd, 0x48, 0x77, 0xab, 0xda, 0xb6, 0x6b, 0x4c, 0x25, 0x9a, 0xe1, 0x38,
	0xa0, 0xc3, 0x0b, 0x74, 0xe1, 0x0e, 0xb4, 0xb6, 0x1d, 0xa3, 0xbf, 0x03, 0x36, 0x1d, 0x11, 0x86,
	0xa3, 0xe8, 0x02, 0x3e, 0x7d, 0x3b, 0x7c, 0xce, 0x18, 0x8f, 0xf1, 0x0e, 0xcc, 0x8c, 0x08, 0x3b,
	0xa1, 0x9c, 0xa8, 0x37, 0x5b, 0xd1, 0xcd, 0xa6, 0x6b, 0x0d, 0xa8, 0x4c, 0xa4, 0x0e, 0x95, 0x60,
	0x66, 0xef, 0xe0, 0x7b, 0xee, 0x4e, 0xb7, 0x6b, 0x4f, 0x21, 0x80, 0x07, 0x3b, 0x7a, 0x6c, 0xd5,
	0x0a, 0xbf, 0xfa, 0xe3, 0xe3, 0xa9, 0xda, 0x37, 0x61, 0xe9, 0xc6, 0xe3, 0x15, 0x7d, 0x01, 0xca,
	0x69, 0x1c, 0x9e, 0x79, 0x9c, 0xfa, 0xaf, 0x88, 0xe0, 0x6a, 0xb7, 0x8b, 0x6e, 0x49, 0xca, 0xba,
	0x5a, 0x54, 0xfb, 0x8d, 0x05, 0x8f, 0xee, 0xe8, 0x5d, 0xf4, 0x14, 0x66, 0x78, 0x7a, 0xf2, 0x53,
	0xe2, 0x0b, 0x85, 0xbe, 0xbb, 0xf6, 0x32, 0x53, 0x84, 0xa0, 0x20, 0x8f, 0x1c, 0xb5, 0x19, 0x45,
	0x57, 0x8d, 0xe5, 0x61, 0x1d, 0xc4, 0x5c, 0x65, 0xb8, 0xe8, 0xca, 0xa1, 0x94, 0xa4, 0x2c, 0x54,
	0x49, 0x2b, 0xba, 0x72, 0xb8, 0x5f, 0x28, 0xe6, 0xec, 0x7c, 0xed, 0x1f, 0x16, 0x54, 0x26, 0x1a,
	0x43, 0x2d, 0xc4, 0xb4, 0xe3, 0xf8, 0x5f, 0x32, 0xeb, 0x96, 0x8c, 0x4c, 0x7d, 0x1a, 0x7e, 0x04,
	0x33, 0xd9, 0x5b, 0x3b, 0x77, 0x6f, 0x6f, 0xed, 0x8c, 0x52, 0xa6, 0x81, 0xc4, 0xf8, 0x24, 0x22,
	0x81, 0x29, 0xb0, 0x3b, 0xd3, 0x60, 0x4c, 0xd7, 0x36, 0x61, 0x76, 0xfc, 0xd9, 0x41, 0x45, 0x28,
	0xb4, 0x8f, 0x7b, 0x87, 0xf6, 0x14, 0x9a, 0x85, 0xe9, 0xdd, 0x5e, 0xef, 0x68, 0xd3, 0xb6, 0xb2,
	0x61, 0xcb, 0xce, 0xe9, 0xbd, 0x5c, 0xfb, 0x05, 0x38, 0xb7, 0x5d, 0x01, 0xa8, 0x0c, 0xc5, 0x6e,
	0xfb, 0x60, 0xaf, 0xb7, 0xf7, 0xf1, 0x8e, 0x3d, 0x85, 0x6c, 0x28, 0x3f, 0x3f, 0x74, 0x5f, 0xb6,
	0xdd, 0x6d, 0xef, 0xf0, 0xe0, 0xc5, 0x47, 0xb6, 0x85, 0x10, 0x54, 0xdb, 0x47, 0x47, 0x3b, 0x07,
	0xdb, 0x9e, 0x51, 0xd8, 0x39, 0x69, 0x95, 0x61, 0xbc, 0xee, 0x4e, 0xcf, 0xce, 0xa3, 0x65, 0x58,
	0x68, 0xbf, 0x78, 0xd9, 0xfe, 0xa8, 0xeb, 0x4d, 0xc0, 0x0b, 0x3a, 0x80, 0x8e, 0x03, 0x73, 0xfa,
	0xff, 0xc3, 0x13, 0xe2, 0x87, 0xfd, 0x90, 0x30, 0x34, 0xfd, 0xd7, 0xcf, 0x3f, 0xcb, 0x5b, 0xfb,
	0x85, 0xe2, 0x23, 0x7b, 0x65, 0xed, 0xb7, 0x16, 0xe4, 0xdd, 0x80, 0xa3, 0x1e, 0x54, 0x26, 0x3e,
	0xe2, 0xa6, 0x3c, 0x56, 0x6f, 0x78, 0x60, 0xeb, 0x4d, 0xec, 0x2a, 0xb3, 0x4e, 0xf5, 0x9f, 0xff,
	0x5a, 0x55, 0xcf, 0xdb, 0xe9, 0x5f, 0xab, 0xa3, 0xa0, 0xec, 0x5f, 0xd2, 0xa2, 0xaf, 0xc1, 0xfc,
	0xe5, 0xdf, 0x97, 0x3e, 0xa4, 0xae, 0x7d, 0x00, 0xe7, 0x2e, 0xfd, 0xb4, 0x64, 0x83, 0xac, 0xfd,
	0xc9, 0x02, 0xb8, 0xd8, 0x36, 0xf4, 0x3e, 0x14, 0xc6, 0xa7, 0xdb, 0x04, 0x50, 0x89, 0xd1, 0x26,
	0x3c, 0x30, 0x4f, 0x9d, 0x9c, 0x8a, 0x79, 0xf9, 0xda, 0x5e, 0x76, 0xd5, 0xe7, 0x7b, 0x77, 0xca,
	0x35, 0x86, 0xe8, 0x1b, 0x50, 0x96, 0x85, 0x17, 0x4c, 0xfe, 0x0a, 0x17, 0xaf, 0x01, 0xdb, 0xf1,
	0xb9, 0xfc, 0x09, 0x2a, 0x5b, 0x1d, 0x5f, 0xa7, 0x02, 0x25, 0xb3, 0x18, 0x29, 0xdd, 0x2f, 0x14,
	0xf3, 0x76, 0xa1, 0x73, 0x0a, 0xdb, 0x21, 0xd5, 0xa9, 0x52, 0x77, 0xdc, 0x3b, 0xd6, 0x6a, 0xa7,
	0x76, 0xe3, 0x09, 0xac, 0xbe, 0x2d, 0x47, 0xd6, 0xc7, 0xb9, 0x51, 0xeb, 0xe4, 0x81, 0x8a, 0xed,
	0x83, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x76, 0xcd, 0x4c, 0xd7, 0x11, 0x00, 0x00,
}
