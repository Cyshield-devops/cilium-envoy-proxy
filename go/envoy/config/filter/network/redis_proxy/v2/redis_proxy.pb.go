// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/network/redis_proxy/v2/redis_proxy.proto

package v2

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/lyft/protoc-gen-validate/validate"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RedisProxy struct {
	// The prefix to use when emitting :ref:`statistics <config_network_filters_redis_proxy_stats>`.
	StatPrefix string `protobuf:"bytes,1,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// Name of cluster from cluster manager. See the :ref:`configuration section
	// <arch_overview_redis_configuration>` of the architecture overview for recommendations on
	// configuring the backing cluster.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Network settings for the connection pool to the upstream cluster.
	Settings *RedisProxy_ConnPoolSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	// Indicates that latency stat should be computed in microseconds. By default it is computed in
	// milliseconds.
	LatencyInMicros      bool     `protobuf:"varint,4,opt,name=latency_in_micros,json=latencyInMicros,proto3" json:"latency_in_micros,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisProxy) Reset()         { *m = RedisProxy{} }
func (m *RedisProxy) String() string { return proto.CompactTextString(m) }
func (*RedisProxy) ProtoMessage()    {}
func (*RedisProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_67e7179f1292d5ae, []int{0}
}

func (m *RedisProxy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisProxy.Unmarshal(m, b)
}
func (m *RedisProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisProxy.Marshal(b, m, deterministic)
}
func (m *RedisProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisProxy.Merge(m, src)
}
func (m *RedisProxy) XXX_Size() int {
	return xxx_messageInfo_RedisProxy.Size(m)
}
func (m *RedisProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisProxy.DiscardUnknown(m)
}

var xxx_messageInfo_RedisProxy proto.InternalMessageInfo

func (m *RedisProxy) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *RedisProxy) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *RedisProxy) GetSettings() *RedisProxy_ConnPoolSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *RedisProxy) GetLatencyInMicros() bool {
	if m != nil {
		return m.LatencyInMicros
	}
	return false
}

// Redis connection pool settings.
type RedisProxy_ConnPoolSettings struct {
	// Per-operation timeout in milliseconds. The timer starts when the first
	// command of a pipeline is written to the backend connection. Each response received from Redis
	// resets the timer since it signifies that the next command is being processed by the backend.
	// The only exception to this behavior is when a connection to a backend is not yet established.
	// In that case, the connect timeout on the cluster will govern the timeout until the connection
	// is ready.
	OpTimeout *duration.Duration `protobuf:"bytes,1,opt,name=op_timeout,json=opTimeout,proto3" json:"op_timeout,omitempty"`
	// Use hash tagging on every redis key to guarantee that keys with the same hash tag will be
	// forwarded to the same upstream. The hash key used for determining the upstream in a
	// consistent hash ring configuration will be computed from the hash tagged key instead of the
	// whole key. The algorithm used to compute the hash tag is identical to the `redis-cluster
	// implementation <https://redis.io/topics/cluster-spec#keys-hash-tags>`_.
	//
	// Examples:
	//
	// * '{user1000}.following' and '{user1000}.followers' **will** be sent to the same upstream
	// * '{user1000}.following' and '{user1001}.following' **might** be sent to the same upstream
	EnableHashtagging    bool     `protobuf:"varint,2,opt,name=enable_hashtagging,json=enableHashtagging,proto3" json:"enable_hashtagging,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisProxy_ConnPoolSettings) Reset()         { *m = RedisProxy_ConnPoolSettings{} }
func (m *RedisProxy_ConnPoolSettings) String() string { return proto.CompactTextString(m) }
func (*RedisProxy_ConnPoolSettings) ProtoMessage()    {}
func (*RedisProxy_ConnPoolSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_67e7179f1292d5ae, []int{0, 0}
}

func (m *RedisProxy_ConnPoolSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisProxy_ConnPoolSettings.Unmarshal(m, b)
}
func (m *RedisProxy_ConnPoolSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisProxy_ConnPoolSettings.Marshal(b, m, deterministic)
}
func (m *RedisProxy_ConnPoolSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisProxy_ConnPoolSettings.Merge(m, src)
}
func (m *RedisProxy_ConnPoolSettings) XXX_Size() int {
	return xxx_messageInfo_RedisProxy_ConnPoolSettings.Size(m)
}
func (m *RedisProxy_ConnPoolSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisProxy_ConnPoolSettings.DiscardUnknown(m)
}

var xxx_messageInfo_RedisProxy_ConnPoolSettings proto.InternalMessageInfo

func (m *RedisProxy_ConnPoolSettings) GetOpTimeout() *duration.Duration {
	if m != nil {
		return m.OpTimeout
	}
	return nil
}

func (m *RedisProxy_ConnPoolSettings) GetEnableHashtagging() bool {
	if m != nil {
		return m.EnableHashtagging
	}
	return false
}

func init() {
	proto.RegisterType((*RedisProxy)(nil), "envoy.config.filter.network.redis_proxy.v2.RedisProxy")
	proto.RegisterType((*RedisProxy_ConnPoolSettings)(nil), "envoy.config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings")
}

func init() {
	proto.RegisterFile("envoy/config/filter/network/redis_proxy/v2/redis_proxy.proto", fileDescriptor_67e7179f1292d5ae)
}

var fileDescriptor_67e7179f1292d5ae = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x41, 0x8e, 0xd3, 0x30,
	0x18, 0x85, 0xe5, 0x74, 0x80, 0xd4, 0x95, 0x98, 0x19, 0x0b, 0x89, 0xd0, 0x05, 0x44, 0xb0, 0xa9,
	0x2a, 0x61, 0x4b, 0x61, 0xc3, 0x82, 0x55, 0x40, 0x62, 0x58, 0x20, 0x85, 0xc0, 0x8a, 0x4d, 0xe4,
	0xa6, 0x8e, 0xc7, 0x22, 0xe3, 0x3f, 0x72, 0x9c, 0xd0, 0xde, 0x00, 0xc1, 0x05, 0x38, 0x03, 0x47,
	0x60, 0xc5, 0x4d, 0x58, 0x73, 0x0b, 0x14, 0x3b, 0x9d, 0x56, 0x5d, 0x75, 0xf7, 0xdb, 0xcf, 0xef,
	0x7f, 0xcf, 0x1f, 0x7e, 0x25, 0x74, 0x0f, 0x5b, 0x56, 0x82, 0xae, 0x94, 0x64, 0x95, 0xaa, 0xad,
	0x30, 0x4c, 0x0b, 0xfb, 0x15, 0xcc, 0x17, 0x66, 0xc4, 0x5a, 0xb5, 0x45, 0x63, 0x60, 0xb3, 0x65,
	0x7d, 0x72, 0x78, 0xa4, 0x8d, 0x01, 0x0b, 0x64, 0xe9, 0xdc, 0xd4, 0xbb, 0xa9, 0x77, 0xd3, 0xd1,
	0x4d, 0x0f, 0x9f, 0xf7, 0xc9, 0xfc, 0xb1, 0x04, 0x90, 0xb5, 0x60, 0xce, 0xb9, 0xea, 0x2a, 0xb6,
	0xee, 0x0c, 0xb7, 0x0a, 0xb4, 0xdf, 0x35, 0x7f, 0xd8, 0xf3, 0x5a, 0xad, 0xb9, 0x15, 0x6c, 0x37,
	0x8c, 0xc2, 0x03, 0x09, 0x12, 0xdc, 0xc8, 0x86, 0xc9, 0xdf, 0x3e, 0xfd, 0x36, 0xc1, 0x38, 0x1f,
	0x12, 0xb2, 0x21, 0x80, 0x2c, 0xf1, 0xac, 0xb5, 0xdc, 0x16, 0x8d, 0x11, 0x95, 0xda, 0x44, 0x28,
	0x46, 0x8b, 0x69, 0x3a, 0xfd, 0xfd, 0xef, 0xcf, 0xe4, 0xcc, 0x04, 0x31, 0xca, 0xf1, 0xa0, 0x66,
	0x4e, 0x24, 0xcf, 0xf0, 0xbd, 0xb2, 0xee, 0x5a, 0x2b, 0x4c, 0x14, 0x1c, 0xbf, 0xdb, 0x29, 0x04,
	0x70, 0xd8, 0x0a, 0x6b, 0x95, 0x96, 0x6d, 0x34, 0x89, 0xd1, 0x62, 0x96, 0xbc, 0xa5, 0xa7, 0xff,
	0x96, 0xee, 0xab, 0xd1, 0xd7, 0xa0, 0x75, 0x06, 0x50, 0x7f, 0x1c, 0xd7, 0xa5, 0x78, 0x88, 0xbb,
	0xf3, 0x1d, 0x05, 0x17, 0x28, 0xbf, 0x0d, 0x21, 0x4b, 0x7c, 0x59, 0x73, 0x2b, 0x74, 0xb9, 0x2d,
	0x94, 0x2e, 0x6e, 0x54, 0x69, 0xa0, 0x8d, 0xce, 0x62, 0xb4, 0x08, 0xf3, 0xf3, 0x51, 0x78, 0xa7,
	0xdf, 0xbb, 0xeb, 0xf9, 0x0f, 0x84, 0x2f, 0x8e, 0xd7, 0x92, 0x2b, 0x8c, 0xa1, 0x29, 0xac, 0xba,
	0x11, 0xd0, 0x59, 0x47, 0x60, 0x96, 0x3c, 0xa2, 0x9e, 0x3a, 0xdd, 0x51, 0xa7, 0x6f, 0x46, 0xea,
	0xe9, 0xfd, 0x9f, 0x7f, 0x9f, 0x20, 0xd7, 0xe4, 0x17, 0x0a, 0x42, 0x94, 0x4f, 0xa1, 0xf9, 0xe4,
	0xbd, 0xe4, 0x39, 0x26, 0x42, 0xf3, 0x55, 0x2d, 0x8a, 0x6b, 0xde, 0x5e, 0x5b, 0x2e, 0xa5, 0xd2,
	0xd2, 0xb1, 0x0a, 0xf3, 0x4b, 0xaf, 0x5c, 0xed, 0x85, 0xf4, 0x03, 0x7e, 0xa9, 0xc0, 0xc3, 0xf1,
	0xff, 0x3f, 0x9d, 0x53, 0x7a, 0xbe, 0x07, 0x95, 0x0d, 0x15, 0x33, 0xf4, 0x39, 0xe8, 0x93, 0xd5,
	0x5d, 0xd7, 0xf7, 0xc5, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0x4a, 0x09, 0xd0, 0x9f, 0x02,
	0x00, 0x00,
}
