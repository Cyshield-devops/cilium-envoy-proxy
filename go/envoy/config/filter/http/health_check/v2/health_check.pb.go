// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/http/health_check/v2/health_check.proto

package v2

import (
	fmt "fmt"
	route "github.com/cilium/proxy/go/envoy/api/v2/route"
	_type "github.com/cilium/proxy/go/envoy/type"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/lyft/protoc-gen-validate/validate"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HealthCheck struct {
	// Specifies whether the filter operates in pass through mode or not.
	PassThroughMode *wrappers.BoolValue `protobuf:"bytes,1,opt,name=pass_through_mode,json=passThroughMode,proto3" json:"pass_through_mode,omitempty"`
	// If operating in pass through mode, the amount of time in milliseconds
	// that the filter should cache the upstream response.
	CacheTime *duration.Duration `protobuf:"bytes,3,opt,name=cache_time,json=cacheTime,proto3" json:"cache_time,omitempty"`
	// If operating in non-pass-through mode, specifies a set of upstream cluster
	// names and the minimum percentage of servers in each of those clusters that
	// must be healthy in order for the filter to return a 200.
	ClusterMinHealthyPercentages map[string]*_type.Percent `protobuf:"bytes,4,rep,name=cluster_min_healthy_percentages,json=clusterMinHealthyPercentages,proto3" json:"cluster_min_healthy_percentages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Specifies a set of health check request headers to match on. The health check filter will
	// check a requestâ€™s headers against all the specified headers. To specify the health check
	// endpoint, set the ``:path`` header to match on.
	Headers              []*route.HeaderMatcher `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *HealthCheck) Reset()         { *m = HealthCheck{} }
func (m *HealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()    {}
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_75439d7b4d98e201, []int{0}
}

func (m *HealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck.Merge(m, src)
}
func (m *HealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck.Size(m)
}
func (m *HealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck proto.InternalMessageInfo

func (m *HealthCheck) GetPassThroughMode() *wrappers.BoolValue {
	if m != nil {
		return m.PassThroughMode
	}
	return nil
}

func (m *HealthCheck) GetCacheTime() *duration.Duration {
	if m != nil {
		return m.CacheTime
	}
	return nil
}

func (m *HealthCheck) GetClusterMinHealthyPercentages() map[string]*_type.Percent {
	if m != nil {
		return m.ClusterMinHealthyPercentages
	}
	return nil
}

func (m *HealthCheck) GetHeaders() []*route.HeaderMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

func init() {
	proto.RegisterType((*HealthCheck)(nil), "envoy.config.filter.http.health_check.v2.HealthCheck")
	proto.RegisterMapType((map[string]*_type.Percent)(nil), "envoy.config.filter.http.health_check.v2.HealthCheck.ClusterMinHealthyPercentagesEntry")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/health_check/v2/health_check.proto", fileDescriptor_75439d7b4d98e201)
}

var fileDescriptor_75439d7b4d98e201 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0x26, 0xc9, 0xae, 0xb6, 0xb3, 0x07, 0xd7, 0x28, 0x18, 0x17, 0xb1, 0xad, 0xa7, 0xf5, 0x32,
	0x03, 0x11, 0x44, 0x2c, 0x78, 0x48, 0x15, 0x8a, 0xb0, 0xb0, 0x84, 0xa2, 0xe0, 0x25, 0x4c, 0x93,
	0xb7, 0xc9, 0xd0, 0x6c, 0xde, 0x30, 0x99, 0x44, 0xf3, 0x17, 0xfc, 0x05, 0x9e, 0xfc, 0x21, 0x9e,
	0xfc, 0x27, 0x9e, 0xfd, 0x01, 0xde, 0x65, 0x66, 0xb2, 0xd8, 0x52, 0xb0, 0xbd, 0x84, 0x97, 0xf9,
	0xde, 0xf7, 0xbd, 0x6f, 0xbe, 0x37, 0xe4, 0x18, 0x9a, 0x1e, 0x07, 0x96, 0x63, 0xb3, 0x11, 0x25,
	0xdb, 0x88, 0x5a, 0x83, 0x62, 0x95, 0xd6, 0x92, 0x55, 0xc0, 0x6b, 0x5d, 0x65, 0x79, 0x05, 0xf9,
	0x05, 0xeb, 0xe3, 0x2b, 0xff, 0x54, 0x2a, 0xd4, 0x18, 0x2e, 0x2d, 0x99, 0x3a, 0x32, 0x75, 0x64,
	0x6a, 0xc8, 0xf4, 0x4a, 0x73, 0x1f, 0x2f, 0x9e, 0x96, 0x88, 0x65, 0x0d, 0xcc, 0xf2, 0xce, 0xbb,
	0x0d, 0x2b, 0x3a, 0xc5, 0xb5, 0xc0, 0xc6, 0x29, 0x5d, 0xc7, 0x3f, 0x2b, 0x2e, 0x25, 0xa8, 0x76,
	0x87, 0x3b, 0x9b, 0x5c, 0x0a, 0x63, 0x45, 0x61, 0xa7, 0xc1, 0x7d, 0x47, 0x3c, 0x72, 0xb8, 0x1e,
	0x24, 0x30, 0x09, 0x2a, 0x87, 0x46, 0x8f, 0xc8, 0xa3, 0x9e, 0xd7, 0xa2, 0xe0, 0x1a, 0xd8, 0xae,
	0x18, 0x81, 0x87, 0x25, 0x96, 0x68, 0x4b, 0x66, 0x2a, 0x77, 0xfa, 0xec, 0x4f, 0x40, 0x66, 0xa7,
	0xd6, 0xfc, 0x89, 0xf1, 0x1e, 0xa6, 0xe4, 0xbe, 0xe4, 0x6d, 0x9b, 0xe9, 0x4a, 0x61, 0x57, 0x56,
	0xd9, 0x16, 0x0b, 0x88, 0xbc, 0x43, 0x6f, 0x39, 0x8b, 0x17, 0xd4, 0x99, 0xa6, 0x3b, 0xd3, 0x34,
	0x41, 0xac, 0x3f, 0xf0, 0xba, 0x83, 0x84, 0xfc, 0xf8, 0xfd, 0x33, 0x98, 0x7e, 0xf5, 0xfc, 0xb9,
	0x97, 0xde, 0x33, 0x02, 0x67, 0x8e, 0xbf, 0xc2, 0x02, 0xc2, 0x37, 0x84, 0xe4, 0x3c, 0xaf, 0x20,
	0xd3, 0x62, 0x0b, 0x51, 0x60, 0xc5, 0x1e, 0x5f, 0x13, 0x7b, 0x3b, 0x26, 0x94, 0x4c, 0xbe, 0xfd,
	0x3a, 0xf0, 0xd2, 0x7d, 0x4b, 0x39, 0x13, 0x5b, 0x08, 0xbf, 0x7b, 0xe4, 0x20, 0xaf, 0xbb, 0x56,
	0x83, 0xca, 0xb6, 0xa2, 0xc9, 0x5c, 0xd8, 0x43, 0x36, 0x5e, 0x9c, 0x97, 0xd0, 0x46, 0x93, 0xc3,
	0x60, 0x39, 0x8b, 0x3f, 0xd2, 0xdb, 0x6e, 0x88, 0x5e, 0xba, 0x34, 0x3d, 0x71, 0xe2, 0x2b, 0xd1,
	0xb8, 0xd3, 0x61, 0xfd, 0x4f, 0xf9, 0x5d, 0xa3, 0xd5, 0x90, 0x3e, 0xc9, 0xff, 0xd3, 0x12, 0x1e,
	0x93, 0xbb, 0x15, 0xf0, 0x02, 0x54, 0x1b, 0x4d, 0xad, 0x8f, 0xa3, 0xd1, 0x07, 0x97, 0xc2, 0xcc,
	0x72, 0x9b, 0x3b, 0xb5, 0x2d, 0x2b, 0xae, 0xf3, 0x0a, 0x54, 0xba, 0x63, 0x2c, 0x0a, 0x72, 0x74,
	0xe3, 0xfc, 0x70, 0x4e, 0x82, 0x0b, 0x18, 0xec, 0x22, 0xf6, 0x53, 0x53, 0x86, 0xcf, 0xc9, 0xb4,
	0x37, 0xd1, 0x47, 0xbe, 0xcd, 0xf3, 0xc1, 0x38, 0xd1, 0xbc, 0x08, 0x3a, 0xd2, 0x53, 0xd7, 0xf1,
	0xda, 0x7f, 0xe5, 0xbd, 0x9f, 0xec, 0xf9, 0xf3, 0x20, 0xdd, 0x83, 0xa6, 0x90, 0x28, 0x1a, 0x9d,
	0xac, 0xc9, 0x4b, 0x81, 0x8e, 0x23, 0x15, 0x7e, 0x19, 0x6e, 0x1d, 0x5c, 0x32, 0xbf, 0x94, 0xdc,
	0xda, 0x2c, 0x6f, 0xed, 0x7d, 0xf2, 0xfb, 0xf8, 0xfc, 0x8e, 0xdd, 0xe4, 0x8b, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x4a, 0x46, 0x39, 0xc9, 0x62, 0x03, 0x00, 0x00,
}
