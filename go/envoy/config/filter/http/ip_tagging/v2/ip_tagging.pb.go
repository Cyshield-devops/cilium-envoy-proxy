// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/http/ip_tagging/v2/ip_tagging.proto

package v2

import (
	fmt "fmt"
	core "github.com/cilium/proxy/go/envoy/api/v2/core"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/lyft/protoc-gen-validate/validate"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The type of requests the filter should apply to. The supported types
// are internal, external or both. The
// :ref:`x-forwarded-for<config_http_conn_man_headers_x-forwarded-for_internal_origin>` header is
// used to determine if a request is internal and will result in
// :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>`
// being set. The filter defaults to both, and it will apply to all request types.
type IPTagging_RequestType int32

const (
	// Both external and internal requests will be tagged. This is the default value.
	IPTagging_BOTH IPTagging_RequestType = 0
	// Only internal requests will be tagged.
	IPTagging_INTERNAL IPTagging_RequestType = 1
	// Only external requests will be tagged.
	IPTagging_EXTERNAL IPTagging_RequestType = 2
)

var IPTagging_RequestType_name = map[int32]string{
	0: "BOTH",
	1: "INTERNAL",
	2: "EXTERNAL",
}

var IPTagging_RequestType_value = map[string]int32{
	"BOTH":     0,
	"INTERNAL": 1,
	"EXTERNAL": 2,
}

func (x IPTagging_RequestType) String() string {
	return proto.EnumName(IPTagging_RequestType_name, int32(x))
}

func (IPTagging_RequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4275d0b367744d2, []int{0, 0}
}

type IPTagging struct {
	// The type of request the filter should apply to.
	RequestType IPTagging_RequestType `protobuf:"varint,1,opt,name=request_type,json=requestType,proto3,enum=envoy.config.filter.http.ip_tagging.v2.IPTagging_RequestType" json:"request_type,omitempty"`
	// [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
	// Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
	// The set of IP tags for the filter.
	IpTags               []*IPTagging_IPTag `protobuf:"bytes,4,rep,name=ip_tags,json=ipTags,proto3" json:"ip_tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *IPTagging) Reset()         { *m = IPTagging{} }
func (m *IPTagging) String() string { return proto.CompactTextString(m) }
func (*IPTagging) ProtoMessage()    {}
func (*IPTagging) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4275d0b367744d2, []int{0}
}

func (m *IPTagging) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPTagging.Unmarshal(m, b)
}
func (m *IPTagging) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPTagging.Marshal(b, m, deterministic)
}
func (m *IPTagging) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPTagging.Merge(m, src)
}
func (m *IPTagging) XXX_Size() int {
	return xxx_messageInfo_IPTagging.Size(m)
}
func (m *IPTagging) XXX_DiscardUnknown() {
	xxx_messageInfo_IPTagging.DiscardUnknown(m)
}

var xxx_messageInfo_IPTagging proto.InternalMessageInfo

func (m *IPTagging) GetRequestType() IPTagging_RequestType {
	if m != nil {
		return m.RequestType
	}
	return IPTagging_BOTH
}

func (m *IPTagging) GetIpTags() []*IPTagging_IPTag {
	if m != nil {
		return m.IpTags
	}
	return nil
}

// Supplies the IP tag name and the IP address subnets.
type IPTagging_IPTag struct {
	// Specifies the IP tag name to apply.
	IpTagName string `protobuf:"bytes,1,opt,name=ip_tag_name,json=ipTagName,proto3" json:"ip_tag_name,omitempty"`
	// A list of IP address subnets that will be tagged with
	// ip_tag_name. Both IPv4 and IPv6 are supported.
	IpList               []*core.CidrRange `protobuf:"bytes,2,rep,name=ip_list,json=ipList,proto3" json:"ip_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *IPTagging_IPTag) Reset()         { *m = IPTagging_IPTag{} }
func (m *IPTagging_IPTag) String() string { return proto.CompactTextString(m) }
func (*IPTagging_IPTag) ProtoMessage()    {}
func (*IPTagging_IPTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4275d0b367744d2, []int{0, 0}
}

func (m *IPTagging_IPTag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPTagging_IPTag.Unmarshal(m, b)
}
func (m *IPTagging_IPTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPTagging_IPTag.Marshal(b, m, deterministic)
}
func (m *IPTagging_IPTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPTagging_IPTag.Merge(m, src)
}
func (m *IPTagging_IPTag) XXX_Size() int {
	return xxx_messageInfo_IPTagging_IPTag.Size(m)
}
func (m *IPTagging_IPTag) XXX_DiscardUnknown() {
	xxx_messageInfo_IPTagging_IPTag.DiscardUnknown(m)
}

var xxx_messageInfo_IPTagging_IPTag proto.InternalMessageInfo

func (m *IPTagging_IPTag) GetIpTagName() string {
	if m != nil {
		return m.IpTagName
	}
	return ""
}

func (m *IPTagging_IPTag) GetIpList() []*core.CidrRange {
	if m != nil {
		return m.IpList
	}
	return nil
}

func init() {
	proto.RegisterEnum("envoy.config.filter.http.ip_tagging.v2.IPTagging_RequestType", IPTagging_RequestType_name, IPTagging_RequestType_value)
	proto.RegisterType((*IPTagging)(nil), "envoy.config.filter.http.ip_tagging.v2.IPTagging")
	proto.RegisterType((*IPTagging_IPTag)(nil), "envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/ip_tagging/v2/ip_tagging.proto", fileDescriptor_f4275d0b367744d2)
}

var fileDescriptor_f4275d0b367744d2 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xcd, 0x8a, 0x1a, 0x31,
	0x00, 0x6e, 0xc6, 0x9f, 0x6a, 0x46, 0x44, 0xe6, 0x52, 0x91, 0x62, 0xc5, 0x43, 0xf1, 0x94, 0xc0,
	0xd8, 0xe2, 0xa9, 0x87, 0x4e, 0x11, 0x2a, 0x88, 0x95, 0x61, 0x0e, 0xa5, 0x94, 0x4a, 0x74, 0x62,
	0x1a, 0x18, 0x27, 0xd9, 0x4c, 0x9c, 0xdd, 0xb9, 0xee, 0x23, 0xec, 0xe3, 0xec, 0x69, 0x5f, 0x67,
	0x61, 0x1f, 0x62, 0x99, 0x64, 0xdc, 0xf5, 0xe8, 0xde, 0xf2, 0xf1, 0xe5, 0xfb, 0x4b, 0xe0, 0x8c,
	0xa6, 0xb9, 0x28, 0xf0, 0x4e, 0xa4, 0x7b, 0xce, 0xf0, 0x9e, 0x27, 0x9a, 0x2a, 0xfc, 0x5f, 0x6b,
	0x89, 0xb9, 0xdc, 0x68, 0xc2, 0x18, 0x4f, 0x19, 0xce, 0xfd, 0x33, 0x84, 0xa4, 0x12, 0x5a, 0x78,
	0x9f, 0x8d, 0x10, 0x59, 0x21, 0xb2, 0x42, 0x54, 0x0a, 0xd1, 0xd9, 0xd5, 0xdc, 0x1f, 0x7c, 0xb2,
	0x01, 0x44, 0xf2, 0xd2, 0x66, 0x27, 0x14, 0xc5, 0x24, 0x8e, 0x15, 0xcd, 0x32, 0x6b, 0x34, 0x18,
	0x32, 0x21, 0x58, 0x42, 0xb1, 0x41, 0xdb, 0xe3, 0x1e, 0x5f, 0x2b, 0x22, 0x25, 0x55, 0x27, 0xfe,
	0x43, 0x4e, 0x12, 0x1e, 0x13, 0x4d, 0xf1, 0xe9, 0x60, 0x89, 0xf1, 0x93, 0x03, 0xdb, 0x8b, 0x75,
	0x64, 0xa3, 0xbc, 0x04, 0x76, 0x14, 0xbd, 0x3a, 0xd2, 0x4c, 0x6f, 0x74, 0x21, 0x69, 0x1f, 0x8c,
	0xc0, 0xa4, 0xeb, 0x7f, 0x43, 0x97, 0xd5, 0x44, 0x2f, 0x46, 0x28, 0xb4, 0x2e, 0x51, 0x21, 0x69,
	0x00, 0xef, 0x1f, 0x1f, 0x6a, 0x8d, 0x5b, 0xe0, 0xf4, 0x40, 0xe8, 0xaa, 0x57, 0xc2, 0xfb, 0x0b,
	0xdf, 0x5b, 0x7d, 0xd6, 0xaf, 0x8f, 0x6a, 0x13, 0xd7, 0x9f, 0xbd, 0x3d, 0xc8, 0x9c, 0xaa, 0x88,
	0x3b, 0xe0, 0xb4, 0x40, 0xd8, 0xe4, 0x32, 0x22, 0x2c, 0x1b, 0xfc, 0x83, 0x0d, 0x43, 0x7a, 0x43,
	0xe8, 0x5a, 0xf5, 0x26, 0x25, 0x07, 0xbb, 0xa9, 0x1d, 0xb6, 0xcd, 0xad, 0x15, 0x39, 0x50, 0xef,
	0xab, 0xa9, 0x91, 0xf0, 0x4c, 0xf7, 0x1d, 0x53, 0xe3, 0x63, 0x55, 0x83, 0x48, 0x5e, 0x86, 0x95,
	0xcf, 0x8d, 0x7e, 0xf0, 0x58, 0x85, 0x24, 0x65, 0xb4, 0xf4, 0x5f, 0xf2, 0x4c, 0x8f, 0xa7, 0xd0,
	0x3d, 0x5b, 0xe9, 0xb5, 0x60, 0x3d, 0xf8, 0x15, 0xfd, 0xec, 0xbd, 0xf3, 0x3a, 0xb0, 0xb5, 0x58,
	0x45, 0xf3, 0x70, 0xf5, 0x7d, 0xd9, 0x03, 0x25, 0x9a, 0xff, 0xae, 0x90, 0x13, 0x2c, 0xe1, 0x17,
	0x2e, 0xac, 0xbd, 0x54, 0xe2, 0xa6, 0xb8, 0x70, 0x70, 0xd0, 0x5d, 0xc8, 0x6a, 0xf1, 0xba, 0xfc,
	0xb6, 0x35, 0xf8, 0xe3, 0xe4, 0xfe, 0xb6, 0x69, 0xfe, 0x70, 0xfa, 0x1c, 0x00, 0x00, 0xff, 0xff,
	0x8c, 0xfe, 0xb3, 0x9e, 0x80, 0x02, 0x00, 0x00,
}
