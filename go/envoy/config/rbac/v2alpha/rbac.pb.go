// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/rbac/v2alpha/rbac.proto

package v2alpha

import (
	fmt "fmt"
	core "github.com/cilium/proxy/go/envoy/api/v2/core"
	route "github.com/cilium/proxy/go/envoy/api/v2/route"
	matcher "github.com/cilium/proxy/go/envoy/type/matcher"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/lyft/protoc-gen-validate/validate"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Should we do safe-list or block-list style access control?
type RBAC_Action int32

const (
	// The policies grant access to principals. The rest is denied. This is safe-list style
	// access control. This is the default type.
	RBAC_ALLOW RBAC_Action = 0
	// The policies deny access to principals. The rest is allowed. This is block-list style
	// access control.
	RBAC_DENY RBAC_Action = 1
)

var RBAC_Action_name = map[int32]string{
	0: "ALLOW",
	1: "DENY",
}

var RBAC_Action_value = map[string]int32{
	"ALLOW": 0,
	"DENY":  1,
}

func (x RBAC_Action) String() string {
	return proto.EnumName(RBAC_Action_name, int32(x))
}

func (RBAC_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_53a5d6d75ef93fbc, []int{0, 0}
}

// Role Based Access Control (RBAC) provides service-level and method-level access control for a
// service. RBAC policies are additive. The policies are examined in order. A request is allowed
// once a matching policy is found (suppose the `action` is ALLOW).
//
// Here is an example of RBAC configuration. It has two policies:
//
// * Service account "cluster.local/ns/default/sa/admin" has full access to the service, and so
//   does "cluster.local/ns/default/sa/superuser".
//
// * Any user can read ("GET") the service at paths with prefix "/products", so long as the
//   destination port is either 80 or 443.
//
//  .. code-block:: yaml
//
//   action: ALLOW
//   policies:
//     "service-admin":
//       permissions:
//         - any: true
//       principals:
//         - authenticated:
//             principal_name:
//               exact: "cluster.local/ns/default/sa/admin"
//         - authenticated:
//             principal_name:
//               exact: "cluster.local/ns/default/sa/superuser"
//     "product-viewer":
//       permissions:
//           - and_rules:
//               rules:
//                 - header: { name: ":method", exact_match: "GET" }
//                 - header: { name: ":path", regex_match: "/products(/.*)?" }
//                 - or_rules:
//                     rules:
//                       - destination_port: 80
//                       - destination_port: 443
//       principals:
//         - any: true
//
type RBAC struct {
	// The action to take if a policy matches. The request is allowed if and only if:
	//
	//   * `action` is "ALLOWED" and at least one policy matches
	//   * `action` is "DENY" and none of the policies match
	Action RBAC_Action `protobuf:"varint,1,opt,name=action,proto3,enum=envoy.config.rbac.v2alpha.RBAC_Action" json:"action,omitempty"`
	// Maps from policy name to policy. A match occurs when at least one policy matches the request.
	Policies             map[string]*Policy `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RBAC) Reset()         { *m = RBAC{} }
func (m *RBAC) String() string { return proto.CompactTextString(m) }
func (*RBAC) ProtoMessage()    {}
func (*RBAC) Descriptor() ([]byte, []int) {
	return fileDescriptor_53a5d6d75ef93fbc, []int{0}
}

func (m *RBAC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RBAC.Unmarshal(m, b)
}
func (m *RBAC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RBAC.Marshal(b, m, deterministic)
}
func (m *RBAC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBAC.Merge(m, src)
}
func (m *RBAC) XXX_Size() int {
	return xxx_messageInfo_RBAC.Size(m)
}
func (m *RBAC) XXX_DiscardUnknown() {
	xxx_messageInfo_RBAC.DiscardUnknown(m)
}

var xxx_messageInfo_RBAC proto.InternalMessageInfo

func (m *RBAC) GetAction() RBAC_Action {
	if m != nil {
		return m.Action
	}
	return RBAC_ALLOW
}

func (m *RBAC) GetPolicies() map[string]*Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

// Policy specifies a role and the principals that are assigned/denied the role. A policy matches if
// and only if at least one of its permissions match the action taking place AND at least one of its
// principals match the downstream.
type Policy struct {
	// Required. The set of permissions that define a role. Each permission is matched with OR
	// semantics. To match all actions for this policy, a single Permission with the `any` field set
	// to true should be used.
	Permissions []*Permission `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// Required. The set of principals that are assigned/denied the role based on “action”. Each
	// principal is matched with OR semantics. To match all downstreams for this policy, a single
	// Principal with the `any` field set to true should be used.
	Principals           []*Principal `protobuf:"bytes,2,rep,name=principals,proto3" json:"principals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_53a5d6d75ef93fbc, []int{1}
}

func (m *Policy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Policy.Unmarshal(m, b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return xxx_messageInfo_Policy.Size(m)
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Policy) GetPrincipals() []*Principal {
	if m != nil {
		return m.Principals
	}
	return nil
}

// Permission defines an action (or actions) that a principal can take.
type Permission struct {
	// Types that are valid to be assigned to Rule:
	//	*Permission_AndRules
	//	*Permission_OrRules
	//	*Permission_Any
	//	*Permission_Header
	//	*Permission_DestinationIp
	//	*Permission_DestinationPort
	//	*Permission_Metadata
	//	*Permission_NotRule
	//	*Permission_RequestedServerName
	Rule                 isPermission_Rule `protobuf_oneof:"rule"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Permission) Reset()         { *m = Permission{} }
func (m *Permission) String() string { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()    {}
func (*Permission) Descriptor() ([]byte, []int) {
	return fileDescriptor_53a5d6d75ef93fbc, []int{2}
}

func (m *Permission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Permission.Unmarshal(m, b)
}
func (m *Permission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Permission.Marshal(b, m, deterministic)
}
func (m *Permission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permission.Merge(m, src)
}
func (m *Permission) XXX_Size() int {
	return xxx_messageInfo_Permission.Size(m)
}
func (m *Permission) XXX_DiscardUnknown() {
	xxx_messageInfo_Permission.DiscardUnknown(m)
}

var xxx_messageInfo_Permission proto.InternalMessageInfo

type isPermission_Rule interface {
	isPermission_Rule()
}

type Permission_AndRules struct {
	AndRules *Permission_Set `protobuf:"bytes,1,opt,name=and_rules,json=andRules,proto3,oneof"`
}

type Permission_OrRules struct {
	OrRules *Permission_Set `protobuf:"bytes,2,opt,name=or_rules,json=orRules,proto3,oneof"`
}

type Permission_Any struct {
	Any bool `protobuf:"varint,3,opt,name=any,proto3,oneof"`
}

type Permission_Header struct {
	Header *route.HeaderMatcher `protobuf:"bytes,4,opt,name=header,proto3,oneof"`
}

type Permission_DestinationIp struct {
	DestinationIp *core.CidrRange `protobuf:"bytes,5,opt,name=destination_ip,json=destinationIp,proto3,oneof"`
}

type Permission_DestinationPort struct {
	DestinationPort uint32 `protobuf:"varint,6,opt,name=destination_port,json=destinationPort,proto3,oneof"`
}

type Permission_Metadata struct {
	Metadata *matcher.MetadataMatcher `protobuf:"bytes,7,opt,name=metadata,proto3,oneof"`
}

type Permission_NotRule struct {
	NotRule *Permission `protobuf:"bytes,8,opt,name=not_rule,json=notRule,proto3,oneof"`
}

type Permission_RequestedServerName struct {
	RequestedServerName *matcher.StringMatcher `protobuf:"bytes,9,opt,name=requested_server_name,json=requestedServerName,proto3,oneof"`
}

func (*Permission_AndRules) isPermission_Rule() {}

func (*Permission_OrRules) isPermission_Rule() {}

func (*Permission_Any) isPermission_Rule() {}

func (*Permission_Header) isPermission_Rule() {}

func (*Permission_DestinationIp) isPermission_Rule() {}

func (*Permission_DestinationPort) isPermission_Rule() {}

func (*Permission_Metadata) isPermission_Rule() {}

func (*Permission_NotRule) isPermission_Rule() {}

func (*Permission_RequestedServerName) isPermission_Rule() {}

func (m *Permission) GetRule() isPermission_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *Permission) GetAndRules() *Permission_Set {
	if x, ok := m.GetRule().(*Permission_AndRules); ok {
		return x.AndRules
	}
	return nil
}

func (m *Permission) GetOrRules() *Permission_Set {
	if x, ok := m.GetRule().(*Permission_OrRules); ok {
		return x.OrRules
	}
	return nil
}

func (m *Permission) GetAny() bool {
	if x, ok := m.GetRule().(*Permission_Any); ok {
		return x.Any
	}
	return false
}

func (m *Permission) GetHeader() *route.HeaderMatcher {
	if x, ok := m.GetRule().(*Permission_Header); ok {
		return x.Header
	}
	return nil
}

func (m *Permission) GetDestinationIp() *core.CidrRange {
	if x, ok := m.GetRule().(*Permission_DestinationIp); ok {
		return x.DestinationIp
	}
	return nil
}

func (m *Permission) GetDestinationPort() uint32 {
	if x, ok := m.GetRule().(*Permission_DestinationPort); ok {
		return x.DestinationPort
	}
	return 0
}

func (m *Permission) GetMetadata() *matcher.MetadataMatcher {
	if x, ok := m.GetRule().(*Permission_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (m *Permission) GetNotRule() *Permission {
	if x, ok := m.GetRule().(*Permission_NotRule); ok {
		return x.NotRule
	}
	return nil
}

func (m *Permission) GetRequestedServerName() *matcher.StringMatcher {
	if x, ok := m.GetRule().(*Permission_RequestedServerName); ok {
		return x.RequestedServerName
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Permission) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Permission_AndRules)(nil),
		(*Permission_OrRules)(nil),
		(*Permission_Any)(nil),
		(*Permission_Header)(nil),
		(*Permission_DestinationIp)(nil),
		(*Permission_DestinationPort)(nil),
		(*Permission_Metadata)(nil),
		(*Permission_NotRule)(nil),
		(*Permission_RequestedServerName)(nil),
	}
}

// Used in the `and_rules` and `or_rules` fields in the `rule` oneof. Depending on the context,
// each are applied with the associated behavior.
type Permission_Set struct {
	Rules                []*Permission `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Permission_Set) Reset()         { *m = Permission_Set{} }
func (m *Permission_Set) String() string { return proto.CompactTextString(m) }
func (*Permission_Set) ProtoMessage()    {}
func (*Permission_Set) Descriptor() ([]byte, []int) {
	return fileDescriptor_53a5d6d75ef93fbc, []int{2, 0}
}

func (m *Permission_Set) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Permission_Set.Unmarshal(m, b)
}
func (m *Permission_Set) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Permission_Set.Marshal(b, m, deterministic)
}
func (m *Permission_Set) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permission_Set.Merge(m, src)
}
func (m *Permission_Set) XXX_Size() int {
	return xxx_messageInfo_Permission_Set.Size(m)
}
func (m *Permission_Set) XXX_DiscardUnknown() {
	xxx_messageInfo_Permission_Set.DiscardUnknown(m)
}

var xxx_messageInfo_Permission_Set proto.InternalMessageInfo

func (m *Permission_Set) GetRules() []*Permission {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Principal defines an identity or a group of identities for a downstream subject.
type Principal struct {
	// Types that are valid to be assigned to Identifier:
	//	*Principal_AndIds
	//	*Principal_OrIds
	//	*Principal_Any
	//	*Principal_Authenticated_
	//	*Principal_SourceIp
	//	*Principal_Header
	//	*Principal_Metadata
	//	*Principal_NotId
	Identifier           isPrincipal_Identifier `protobuf_oneof:"identifier"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Principal) Reset()         { *m = Principal{} }
func (m *Principal) String() string { return proto.CompactTextString(m) }
func (*Principal) ProtoMessage()    {}
func (*Principal) Descriptor() ([]byte, []int) {
	return fileDescriptor_53a5d6d75ef93fbc, []int{3}
}

func (m *Principal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Principal.Unmarshal(m, b)
}
func (m *Principal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Principal.Marshal(b, m, deterministic)
}
func (m *Principal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Principal.Merge(m, src)
}
func (m *Principal) XXX_Size() int {
	return xxx_messageInfo_Principal.Size(m)
}
func (m *Principal) XXX_DiscardUnknown() {
	xxx_messageInfo_Principal.DiscardUnknown(m)
}

var xxx_messageInfo_Principal proto.InternalMessageInfo

type isPrincipal_Identifier interface {
	isPrincipal_Identifier()
}

type Principal_AndIds struct {
	AndIds *Principal_Set `protobuf:"bytes,1,opt,name=and_ids,json=andIds,proto3,oneof"`
}

type Principal_OrIds struct {
	OrIds *Principal_Set `protobuf:"bytes,2,opt,name=or_ids,json=orIds,proto3,oneof"`
}

type Principal_Any struct {
	Any bool `protobuf:"varint,3,opt,name=any,proto3,oneof"`
}

type Principal_Authenticated_ struct {
	Authenticated *Principal_Authenticated `protobuf:"bytes,4,opt,name=authenticated,proto3,oneof"`
}

type Principal_SourceIp struct {
	SourceIp *core.CidrRange `protobuf:"bytes,5,opt,name=source_ip,json=sourceIp,proto3,oneof"`
}

type Principal_Header struct {
	Header *route.HeaderMatcher `protobuf:"bytes,6,opt,name=header,proto3,oneof"`
}

type Principal_Metadata struct {
	Metadata *matcher.MetadataMatcher `protobuf:"bytes,7,opt,name=metadata,proto3,oneof"`
}

type Principal_NotId struct {
	NotId *Principal `protobuf:"bytes,8,opt,name=not_id,json=notId,proto3,oneof"`
}

func (*Principal_AndIds) isPrincipal_Identifier() {}

func (*Principal_OrIds) isPrincipal_Identifier() {}

func (*Principal_Any) isPrincipal_Identifier() {}

func (*Principal_Authenticated_) isPrincipal_Identifier() {}

func (*Principal_SourceIp) isPrincipal_Identifier() {}

func (*Principal_Header) isPrincipal_Identifier() {}

func (*Principal_Metadata) isPrincipal_Identifier() {}

func (*Principal_NotId) isPrincipal_Identifier() {}

func (m *Principal) GetIdentifier() isPrincipal_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *Principal) GetAndIds() *Principal_Set {
	if x, ok := m.GetIdentifier().(*Principal_AndIds); ok {
		return x.AndIds
	}
	return nil
}

func (m *Principal) GetOrIds() *Principal_Set {
	if x, ok := m.GetIdentifier().(*Principal_OrIds); ok {
		return x.OrIds
	}
	return nil
}

func (m *Principal) GetAny() bool {
	if x, ok := m.GetIdentifier().(*Principal_Any); ok {
		return x.Any
	}
	return false
}

func (m *Principal) GetAuthenticated() *Principal_Authenticated {
	if x, ok := m.GetIdentifier().(*Principal_Authenticated_); ok {
		return x.Authenticated
	}
	return nil
}

func (m *Principal) GetSourceIp() *core.CidrRange {
	if x, ok := m.GetIdentifier().(*Principal_SourceIp); ok {
		return x.SourceIp
	}
	return nil
}

func (m *Principal) GetHeader() *route.HeaderMatcher {
	if x, ok := m.GetIdentifier().(*Principal_Header); ok {
		return x.Header
	}
	return nil
}

func (m *Principal) GetMetadata() *matcher.MetadataMatcher {
	if x, ok := m.GetIdentifier().(*Principal_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (m *Principal) GetNotId() *Principal {
	if x, ok := m.GetIdentifier().(*Principal_NotId); ok {
		return x.NotId
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Principal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Principal_AndIds)(nil),
		(*Principal_OrIds)(nil),
		(*Principal_Any)(nil),
		(*Principal_Authenticated_)(nil),
		(*Principal_SourceIp)(nil),
		(*Principal_Header)(nil),
		(*Principal_Metadata)(nil),
		(*Principal_NotId)(nil),
	}
}

// Used in the `and_ids` and `or_ids` fields in the `identifier` oneof. Depending on the context,
// each are applied with the associated behavior.
type Principal_Set struct {
	Ids                  []*Principal `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Principal_Set) Reset()         { *m = Principal_Set{} }
func (m *Principal_Set) String() string { return proto.CompactTextString(m) }
func (*Principal_Set) ProtoMessage()    {}
func (*Principal_Set) Descriptor() ([]byte, []int) {
	return fileDescriptor_53a5d6d75ef93fbc, []int{3, 0}
}

func (m *Principal_Set) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Principal_Set.Unmarshal(m, b)
}
func (m *Principal_Set) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Principal_Set.Marshal(b, m, deterministic)
}
func (m *Principal_Set) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Principal_Set.Merge(m, src)
}
func (m *Principal_Set) XXX_Size() int {
	return xxx_messageInfo_Principal_Set.Size(m)
}
func (m *Principal_Set) XXX_DiscardUnknown() {
	xxx_messageInfo_Principal_Set.DiscardUnknown(m)
}

var xxx_messageInfo_Principal_Set proto.InternalMessageInfo

func (m *Principal_Set) GetIds() []*Principal {
	if m != nil {
		return m.Ids
	}
	return nil
}

// Authentication attributes for a downstream.
type Principal_Authenticated struct {
	// The name of the principal. If set, The URI SAN is used from the certificate, otherwise the
	// subject field is used. If unset, it applies to any user that is authenticated.
	PrincipalName        *matcher.StringMatcher `protobuf:"bytes,2,opt,name=principal_name,json=principalName,proto3" json:"principal_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Principal_Authenticated) Reset()         { *m = Principal_Authenticated{} }
func (m *Principal_Authenticated) String() string { return proto.CompactTextString(m) }
func (*Principal_Authenticated) ProtoMessage()    {}
func (*Principal_Authenticated) Descriptor() ([]byte, []int) {
	return fileDescriptor_53a5d6d75ef93fbc, []int{3, 1}
}

func (m *Principal_Authenticated) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Principal_Authenticated.Unmarshal(m, b)
}
func (m *Principal_Authenticated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Principal_Authenticated.Marshal(b, m, deterministic)
}
func (m *Principal_Authenticated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Principal_Authenticated.Merge(m, src)
}
func (m *Principal_Authenticated) XXX_Size() int {
	return xxx_messageInfo_Principal_Authenticated.Size(m)
}
func (m *Principal_Authenticated) XXX_DiscardUnknown() {
	xxx_messageInfo_Principal_Authenticated.DiscardUnknown(m)
}

var xxx_messageInfo_Principal_Authenticated proto.InternalMessageInfo

func (m *Principal_Authenticated) GetPrincipalName() *matcher.StringMatcher {
	if m != nil {
		return m.PrincipalName
	}
	return nil
}

func init() {
	proto.RegisterEnum("envoy.config.rbac.v2alpha.RBAC_Action", RBAC_Action_name, RBAC_Action_value)
	proto.RegisterType((*RBAC)(nil), "envoy.config.rbac.v2alpha.RBAC")
	proto.RegisterMapType((map[string]*Policy)(nil), "envoy.config.rbac.v2alpha.RBAC.PoliciesEntry")
	proto.RegisterType((*Policy)(nil), "envoy.config.rbac.v2alpha.Policy")
	proto.RegisterType((*Permission)(nil), "envoy.config.rbac.v2alpha.Permission")
	proto.RegisterType((*Permission_Set)(nil), "envoy.config.rbac.v2alpha.Permission.Set")
	proto.RegisterType((*Principal)(nil), "envoy.config.rbac.v2alpha.Principal")
	proto.RegisterType((*Principal_Set)(nil), "envoy.config.rbac.v2alpha.Principal.Set")
	proto.RegisterType((*Principal_Authenticated)(nil), "envoy.config.rbac.v2alpha.Principal.Authenticated")
}

func init() {
	proto.RegisterFile("envoy/config/rbac/v2alpha/rbac.proto", fileDescriptor_53a5d6d75ef93fbc)
}

var fileDescriptor_53a5d6d75ef93fbc = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x8f, 0xdb, 0x44,
	0x18, 0x8d, 0xed, 0xd8, 0xeb, 0x7c, 0x51, 0x96, 0x68, 0x0a, 0xc2, 0x44, 0xb4, 0xa4, 0xa1, 0x40,
	0x40, 0xc2, 0x96, 0xc2, 0x81, 0x8a, 0x0a, 0xa4, 0x78, 0x59, 0x48, 0x50, 0xbb, 0x44, 0xce, 0xa1,
	0xa2, 0x07, 0x56, 0xb3, 0xf6, 0x34, 0x19, 0x48, 0x66, 0xcc, 0x78, 0x12, 0x91, 0x7f, 0x81, 0xf8,
	0x23, 0x5c, 0x51, 0x4f, 0xfd, 0x0b, 0xdc, 0x38, 0x73, 0xeb, 0xaf, 0x28, 0x9a, 0x19, 0x27, 0x1b,
	0x1f, 0xba, 0xcd, 0xae, 0x7a, 0x89, 0x26, 0x9e, 0xf7, 0xde, 0xf7, 0xcd, 0xe7, 0xf7, 0xc6, 0x70,
	0x8f, 0xb0, 0x35, 0xdf, 0x44, 0x29, 0x67, 0x4f, 0xe9, 0x2c, 0x12, 0x17, 0x38, 0x8d, 0xd6, 0x03,
	0xbc, 0xc8, 0xe7, 0x58, 0xff, 0x09, 0x73, 0xc1, 0x25, 0x47, 0xef, 0x69, 0x54, 0x68, 0x50, 0xa1,
	0xde, 0x28, 0x51, 0x9d, 0x77, 0xd7, 0x78, 0x41, 0x33, 0x2c, 0x49, 0xb4, 0x5d, 0x18, 0x4e, 0xe7,
	0xed, 0x19, 0x9f, 0x71, 0xbd, 0x8c, 0xd4, 0xaa, 0x7c, 0xfa, 0x81, 0xa9, 0x87, 0x73, 0x1a, 0xad,
	0x07, 0x51, 0xca, 0x05, 0x89, 0x70, 0x96, 0x09, 0x52, 0x14, 0x25, 0xe0, 0x4e, 0x05, 0x20, 0xf8,
	0x4a, 0x12, 0xf3, 0x5b, 0xee, 0xdf, 0x35, 0xfb, 0x72, 0x93, 0x93, 0x68, 0x89, 0x65, 0x3a, 0x27,
	0x22, 0x5a, 0x12, 0x89, 0x33, 0x2c, 0x71, 0xb5, 0x46, 0x05, 0x52, 0x48, 0x41, 0xd9, 0xcc, 0x00,
	0x7a, 0x7f, 0xd8, 0x50, 0x4f, 0xe2, 0xe1, 0x09, 0xfa, 0x06, 0x3c, 0x9c, 0x4a, 0xca, 0x59, 0x60,
	0x75, 0xad, 0xfe, 0xf1, 0xe0, 0xe3, 0xf0, 0x95, 0x07, 0x0d, 0x15, 0x21, 0x1c, 0x6a, 0x74, 0x52,
	0xb2, 0xd0, 0x18, 0xfc, 0x9c, 0x2f, 0x68, 0x4a, 0x49, 0x11, 0xd8, 0x5d, 0xa7, 0xdf, 0x1c, 0x7c,
	0xfe, 0x3a, 0x85, 0x49, 0x89, 0x3f, 0x65, 0x52, 0x6c, 0x92, 0x1d, 0xbd, 0xf3, 0x33, 0xb4, 0x2a,
	0x5b, 0xa8, 0x0d, 0xce, 0xaf, 0x64, 0xa3, 0x1b, 0x6b, 0x24, 0x6a, 0x89, 0xbe, 0x04, 0x77, 0x8d,
	0x17, 0x2b, 0x12, 0xd8, 0x5d, 0xab, 0xdf, 0x1c, 0xdc, 0xbd, 0xa2, 0x94, 0x96, 0xda, 0x24, 0x06,
	0xff, 0x95, 0x7d, 0xdf, 0xea, 0xdd, 0x06, 0xcf, 0x34, 0x8f, 0x1a, 0xe0, 0x0e, 0x1f, 0x3e, 0xfc,
	0xf1, 0x71, 0xbb, 0x86, 0x7c, 0xa8, 0x7f, 0x7b, 0x7a, 0xf6, 0x53, 0xdb, 0xea, 0xfd, 0x65, 0x81,
	0x67, 0x48, 0x68, 0x0a, 0xcd, 0x9c, 0x88, 0x25, 0x2d, 0x0a, 0xca, 0x59, 0x11, 0x58, 0xfa, 0x5c,
	0x1f, 0x5d, 0x55, 0x6c, 0x87, 0x8e, 0xe1, 0xd9, 0x8b, 0xe7, 0x8e, 0xfb, 0xa7, 0x65, 0xfb, 0x56,
	0xb2, 0xaf, 0x82, 0x26, 0x00, 0xb9, 0xa0, 0x2c, 0xa5, 0x39, 0x5e, 0x6c, 0x67, 0x75, 0xef, 0x2a,
	0xcd, 0x2d, 0xb8, 0x22, 0xb9, 0xa7, 0xd1, 0x7b, 0xe6, 0x02, 0x5c, 0x56, 0x46, 0x23, 0x68, 0x60,
	0x96, 0x9d, 0x8b, 0xd5, 0x82, 0x14, 0x7a, 0x68, 0xcd, 0xc1, 0xa7, 0x07, 0xf5, 0x1c, 0x4e, 0x89,
	0x1c, 0xd5, 0x12, 0x1f, 0xb3, 0x2c, 0x51, 0x64, 0xf4, 0x1d, 0xf8, 0x5c, 0x94, 0x42, 0xf6, 0xf5,
	0x85, 0x8e, 0xb8, 0x30, 0x3a, 0xb7, 0xc1, 0xc1, 0x6c, 0x13, 0x38, 0x5d, 0xab, 0xef, 0xc7, 0x0d,
	0x75, 0x8a, 0xfa, 0x2f, 0xb6, 0x6f, 0x8d, 0x6a, 0x89, 0x7a, 0x8e, 0x1e, 0x80, 0x37, 0x27, 0x38,
	0x23, 0x22, 0xa8, 0x57, 0x5e, 0x27, 0xce, 0x69, 0xb8, 0x1e, 0x84, 0xc6, 0xf3, 0x23, 0x8d, 0x78,
	0x64, 0x4c, 0x3c, 0xaa, 0x25, 0x25, 0x05, 0x9d, 0xc2, 0x71, 0x46, 0x0a, 0x49, 0x19, 0x56, 0xaf,
	0xf4, 0x9c, 0xe6, 0x81, 0xab, 0x45, 0xde, 0xaf, 0x8a, 0xa8, 0x7c, 0x85, 0x27, 0x34, 0x13, 0x09,
	0x66, 0x33, 0x32, 0xaa, 0x25, 0xad, 0x3d, 0xd6, 0x38, 0x47, 0xf7, 0xa1, 0xbd, 0x2f, 0x93, 0x73,
	0x21, 0x03, 0xaf, 0x6b, 0xf5, 0x5b, 0x71, 0x53, 0xf5, 0xeb, 0x7d, 0x56, 0x0f, 0x5e, 0xbe, 0x74,
	0x46, 0xb5, 0xe4, 0xad, 0x3d, 0xd8, 0x84, 0x0b, 0x89, 0x86, 0xe0, 0x6f, 0x53, 0x17, 0x1c, 0xe9,
	0xd2, 0x1f, 0x96, 0xa5, 0x55, 0xec, 0xc2, 0x32, 0x76, 0xe1, 0xa3, 0x12, 0x73, 0x79, 0x82, 0x1d,
	0x0d, 0xc5, 0xe0, 0x33, 0x2e, 0xf5, 0xa0, 0x03, 0x5f, 0x4b, 0x1c, 0x66, 0x32, 0x35, 0x63, 0xc6,
	0xa5, 0x1a, 0x32, 0x7a, 0x0c, 0xef, 0x08, 0xf2, 0xdb, 0x8a, 0x14, 0x92, 0x64, 0xe7, 0x05, 0x11,
	0x6b, 0x22, 0xce, 0x19, 0x5e, 0x92, 0xa0, 0x51, 0x99, 0x69, 0xa5, 0xa7, 0xa9, 0xbe, 0x0a, 0x2e,
	0x3b, 0xba, 0xb5, 0x53, 0x98, 0x6a, 0x81, 0x33, 0xbc, 0x24, 0x9d, 0x33, 0x70, 0xa6, 0x44, 0xa2,
	0xef, 0xc1, 0xdd, 0x3a, 0xea, 0x86, 0x29, 0x30, 0xfc, 0xb8, 0x05, 0x75, 0xb5, 0x40, 0xee, 0xdf,
	0x2f, 0x9e, 0x3b, 0x56, 0xef, 0x1f, 0x17, 0x1a, 0x3b, 0x8b, 0xa3, 0x13, 0x38, 0x52, 0xde, 0xa5,
	0xd9, 0xd6, 0xb9, 0xfd, 0x43, 0x92, 0x51, 0xfa, 0xcd, 0xc3, 0x2c, 0x1b, 0x67, 0x05, 0x1a, 0x82,
	0xc7, 0x85, 0xd6, 0xb0, 0xaf, 0xad, 0xe1, 0x72, 0xa1, 0x24, 0x5e, 0xe3, 0xd8, 0x27, 0xd0, 0xc2,
	0x2b, 0x39, 0x27, 0x4c, 0xd2, 0x14, 0x4b, 0x92, 0x95, 0xc6, 0x1d, 0x1c, 0x54, 0x68, 0xb8, 0xcf,
	0x54, 0x4e, 0xac, 0x48, 0xa1, 0x07, 0xd0, 0x28, 0xf8, 0x4a, 0xa4, 0xe4, 0x70, 0x2f, 0xfb, 0x86,
	0x30, 0xce, 0xf7, 0xa2, 0xe4, 0x5d, 0x3f, 0x4a, 0x6f, 0xc0, 0xc9, 0x5f, 0x83, 0xa7, 0x9c, 0x4c,
	0xb3, 0xd2, 0xc7, 0x07, 0x5d, 0x6c, 0x6a, 0xec, 0x8c, 0xcb, 0x71, 0xd6, 0x19, 0x1b, 0xaf, 0xc5,
	0xe0, 0x18, 0x07, 0xdc, 0xec, 0x6e, 0x54, 0xe4, 0x0e, 0x81, 0x56, 0x65, 0xd0, 0x68, 0x04, 0xc7,
	0xbb, 0x3b, 0xd3, 0x24, 0xc3, 0x3e, 0x30, 0x19, 0x49, 0x6b, 0x47, 0x54, 0x89, 0xf8, 0xa1, 0xee,
	0x5b, 0x6d, 0x3b, 0xa9, 0x2b, 0x8d, 0xf8, 0x16, 0x00, 0xcd, 0x54, 0x91, 0xa7, 0x94, 0x88, 0xd2,
	0xd3, 0xf1, 0xc9, 0xbf, 0xff, 0xdd, 0xb1, 0xe0, 0x13, 0xca, 0x8d, 0x74, 0x2e, 0xf8, 0xef, 0x9b,
	0x57, 0x9f, 0x22, 0x6e, 0x24, 0x17, 0x38, 0x9d, 0xa8, 0xef, 0xf1, 0xc4, 0x7a, 0x72, 0x54, 0x3e,
	0xbd, 0xf0, 0xf4, 0x17, 0xfa, 0x8b, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xf4, 0xaa, 0x47,
	0x98, 0x08, 0x00, 0x00,
}
