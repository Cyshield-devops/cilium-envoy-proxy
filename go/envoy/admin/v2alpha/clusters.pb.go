// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/admin/v2alpha/clusters.proto

package envoy_admin_v2alpha

import (
	fmt "fmt"
	core "github.com/cilium/proxy/go/envoy/api/v2/core"
	_type "github.com/cilium/proxy/go/envoy/type"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Admin endpoint uses this wrapper for `/clusters` to display cluster status information.
// See :ref:`/clusters <operations_admin_interface_clusters>` for more information.
type Clusters struct {
	// Mapping from cluster name to each cluster's status.
	ClusterStatuses      []*ClusterStatus `protobuf:"bytes,1,rep,name=cluster_statuses,json=clusterStatuses,proto3" json:"cluster_statuses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Clusters) Reset()         { *m = Clusters{} }
func (m *Clusters) String() string { return proto.CompactTextString(m) }
func (*Clusters) ProtoMessage()    {}
func (*Clusters) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6251a3a957f478b, []int{0}
}

func (m *Clusters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Clusters.Unmarshal(m, b)
}
func (m *Clusters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Clusters.Marshal(b, m, deterministic)
}
func (m *Clusters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clusters.Merge(m, src)
}
func (m *Clusters) XXX_Size() int {
	return xxx_messageInfo_Clusters.Size(m)
}
func (m *Clusters) XXX_DiscardUnknown() {
	xxx_messageInfo_Clusters.DiscardUnknown(m)
}

var xxx_messageInfo_Clusters proto.InternalMessageInfo

func (m *Clusters) GetClusterStatuses() []*ClusterStatus {
	if m != nil {
		return m.ClusterStatuses
	}
	return nil
}

// Details an individual cluster's current status.
type ClusterStatus struct {
	// Name of the cluster.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Denotes whether this cluster was added via API or configured statically.
	AddedViaApi bool `protobuf:"varint,2,opt,name=added_via_api,json=addedViaApi,proto3" json:"added_via_api,omitempty"`
	// The success rate threshold used in the last interval. The threshold is used to eject hosts
	// based on their success rate. See
	// :ref:`Cluster outlier detection <arch_overview_outlier_detection>` statistics
	//
	// Note: this field may be omitted in any of the three following cases:
	//
	// 1. There were not enough hosts with enough request volume to proceed with success rate based
	//    outlier ejection.
	// 2. The threshold is computed to be < 0 because a negative value implies that there was no
	//    threshold for that interval.
	// 3. Outlier detection is not enabled for this cluster.
	SuccessRateEjectionThreshold *_type.Percent `protobuf:"bytes,3,opt,name=success_rate_ejection_threshold,json=successRateEjectionThreshold,proto3" json:"success_rate_ejection_threshold,omitempty"`
	// Mapping from host address to the host's current status.
	HostStatuses         []*HostStatus `protobuf:"bytes,4,rep,name=host_statuses,json=hostStatuses,proto3" json:"host_statuses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ClusterStatus) Reset()         { *m = ClusterStatus{} }
func (m *ClusterStatus) String() string { return proto.CompactTextString(m) }
func (*ClusterStatus) ProtoMessage()    {}
func (*ClusterStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6251a3a957f478b, []int{1}
}

func (m *ClusterStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterStatus.Unmarshal(m, b)
}
func (m *ClusterStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterStatus.Marshal(b, m, deterministic)
}
func (m *ClusterStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterStatus.Merge(m, src)
}
func (m *ClusterStatus) XXX_Size() int {
	return xxx_messageInfo_ClusterStatus.Size(m)
}
func (m *ClusterStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterStatus proto.InternalMessageInfo

func (m *ClusterStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterStatus) GetAddedViaApi() bool {
	if m != nil {
		return m.AddedViaApi
	}
	return false
}

func (m *ClusterStatus) GetSuccessRateEjectionThreshold() *_type.Percent {
	if m != nil {
		return m.SuccessRateEjectionThreshold
	}
	return nil
}

func (m *ClusterStatus) GetHostStatuses() []*HostStatus {
	if m != nil {
		return m.HostStatuses
	}
	return nil
}

// Current state of a particular host.
type HostStatus struct {
	// Address of this host.
	Address *core.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// List of stats specific to this host.
	Stats []*SimpleMetric `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`
	// The host's current health status.
	HealthStatus *HostHealthStatus `protobuf:"bytes,3,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
	// Request success rate for this host over the last calculated interval.
	//
	// Note: the message will not be present if host did not have enough request volume to calculate
	// success rate or the cluster did not have enough hosts to run through success rate outlier
	// ejection.
	SuccessRate *_type.Percent `protobuf:"bytes,4,opt,name=success_rate,json=successRate,proto3" json:"success_rate,omitempty"`
	// The host's weight. If not configured, the value defaults to 1.
	Weight               uint32   `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostStatus) Reset()         { *m = HostStatus{} }
func (m *HostStatus) String() string { return proto.CompactTextString(m) }
func (*HostStatus) ProtoMessage()    {}
func (*HostStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6251a3a957f478b, []int{2}
}

func (m *HostStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostStatus.Unmarshal(m, b)
}
func (m *HostStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostStatus.Marshal(b, m, deterministic)
}
func (m *HostStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostStatus.Merge(m, src)
}
func (m *HostStatus) XXX_Size() int {
	return xxx_messageInfo_HostStatus.Size(m)
}
func (m *HostStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_HostStatus.DiscardUnknown(m)
}

var xxx_messageInfo_HostStatus proto.InternalMessageInfo

func (m *HostStatus) GetAddress() *core.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *HostStatus) GetStats() []*SimpleMetric {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *HostStatus) GetHealthStatus() *HostHealthStatus {
	if m != nil {
		return m.HealthStatus
	}
	return nil
}

func (m *HostStatus) GetSuccessRate() *_type.Percent {
	if m != nil {
		return m.SuccessRate
	}
	return nil
}

func (m *HostStatus) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// Health status for a host.
type HostHealthStatus struct {
	// The host is currently failing active health checks.
	FailedActiveHealthCheck bool `protobuf:"varint,1,opt,name=failed_active_health_check,json=failedActiveHealthCheck,proto3" json:"failed_active_health_check,omitempty"`
	// The host is currently considered an outlier and has been ejected.
	FailedOutlierCheck bool `protobuf:"varint,2,opt,name=failed_outlier_check,json=failedOutlierCheck,proto3" json:"failed_outlier_check,omitempty"`
	// The host is currently being marked as degraded through active health checking.
	FailedActiveDegradedCheck bool `protobuf:"varint,4,opt,name=failed_active_degraded_check,json=failedActiveDegradedCheck,proto3" json:"failed_active_degraded_check,omitempty"`
	// The host has been removed from service discovery, but is being stabilized due to active
	// health checking.
	PendingDynamicRemoval bool `protobuf:"varint,5,opt,name=pending_dynamic_removal,json=pendingDynamicRemoval,proto3" json:"pending_dynamic_removal,omitempty"`
	// The host has not yet been health checked.
	PendingActiveHc bool `protobuf:"varint,6,opt,name=pending_active_hc,json=pendingActiveHc,proto3" json:"pending_active_hc,omitempty"`
	// Health status as reported by EDS. Note: only HEALTHY and UNHEALTHY are currently supported
	// here.
	// TODO(mrice32): pipe through remaining EDS health status possibilities.
	EdsHealthStatus      core.HealthStatus `protobuf:"varint,3,opt,name=eds_health_status,json=edsHealthStatus,proto3,enum=envoy.api.v2.core.HealthStatus" json:"eds_health_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HostHealthStatus) Reset()         { *m = HostHealthStatus{} }
func (m *HostHealthStatus) String() string { return proto.CompactTextString(m) }
func (*HostHealthStatus) ProtoMessage()    {}
func (*HostHealthStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6251a3a957f478b, []int{3}
}

func (m *HostHealthStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostHealthStatus.Unmarshal(m, b)
}
func (m *HostHealthStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostHealthStatus.Marshal(b, m, deterministic)
}
func (m *HostHealthStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostHealthStatus.Merge(m, src)
}
func (m *HostHealthStatus) XXX_Size() int {
	return xxx_messageInfo_HostHealthStatus.Size(m)
}
func (m *HostHealthStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_HostHealthStatus.DiscardUnknown(m)
}

var xxx_messageInfo_HostHealthStatus proto.InternalMessageInfo

func (m *HostHealthStatus) GetFailedActiveHealthCheck() bool {
	if m != nil {
		return m.FailedActiveHealthCheck
	}
	return false
}

func (m *HostHealthStatus) GetFailedOutlierCheck() bool {
	if m != nil {
		return m.FailedOutlierCheck
	}
	return false
}

func (m *HostHealthStatus) GetFailedActiveDegradedCheck() bool {
	if m != nil {
		return m.FailedActiveDegradedCheck
	}
	return false
}

func (m *HostHealthStatus) GetPendingDynamicRemoval() bool {
	if m != nil {
		return m.PendingDynamicRemoval
	}
	return false
}

func (m *HostHealthStatus) GetPendingActiveHc() bool {
	if m != nil {
		return m.PendingActiveHc
	}
	return false
}

func (m *HostHealthStatus) GetEdsHealthStatus() core.HealthStatus {
	if m != nil {
		return m.EdsHealthStatus
	}
	return core.HealthStatus_UNKNOWN
}

func init() {
	proto.RegisterType((*Clusters)(nil), "envoy.admin.v2alpha.Clusters")
	proto.RegisterType((*ClusterStatus)(nil), "envoy.admin.v2alpha.ClusterStatus")
	proto.RegisterType((*HostStatus)(nil), "envoy.admin.v2alpha.HostStatus")
	proto.RegisterType((*HostHealthStatus)(nil), "envoy.admin.v2alpha.HostHealthStatus")
}

func init() { proto.RegisterFile("envoy/admin/v2alpha/clusters.proto", fileDescriptor_c6251a3a957f478b) }

var fileDescriptor_c6251a3a957f478b = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x95, 0xae, 0x1b, 0xc5, 0x5d, 0xd9, 0xe6, 0x01, 0x0b, 0xd5, 0xa4, 0x75, 0x11, 0x48,
	0x15, 0x17, 0x09, 0x2a, 0xd3, 0xb8, 0xe0, 0x02, 0xed, 0x0f, 0xd2, 0x04, 0x9a, 0x98, 0x32, 0x84,
	0x04, 0x37, 0x96, 0xb1, 0x0f, 0x8b, 0x21, 0x8d, 0x23, 0xdb, 0x0d, 0xf4, 0x49, 0x78, 0x46, 0xae,
	0x79, 0x01, 0x14, 0xdb, 0xd9, 0x52, 0xd6, 0xdd, 0xd5, 0xf9, 0x7e, 0x5f, 0x7c, 0xbe, 0x73, 0x4e,
	0x83, 0x22, 0x28, 0x2a, 0x39, 0x4f, 0x28, 0x9f, 0x8a, 0x22, 0xa9, 0x26, 0x34, 0x2f, 0x33, 0x9a,
	0xb0, 0x7c, 0xa6, 0x0d, 0x28, 0x1d, 0x97, 0x4a, 0x1a, 0x89, 0xb7, 0x2d, 0x13, 0x5b, 0x26, 0xf6,
	0xcc, 0x70, 0x7f, 0x99, 0x71, 0x0a, 0x46, 0x09, 0xe6, 0x7d, 0xc3, 0x3d, 0x8f, 0x94, 0x22, 0xa9,
	0x26, 0x09, 0x93, 0x0a, 0x12, 0xca, 0xb9, 0x02, 0xdd, 0x00, 0x4f, 0x6f, 0x03, 0x19, 0xd0, 0xdc,
	0x64, 0x84, 0x65, 0xc0, 0x7e, 0x78, 0x2a, 0x74, 0x94, 0x99, 0x97, 0x90, 0x94, 0xa0, 0x18, 0x14,
	0xc6, 0x29, 0xd1, 0x67, 0xd4, 0x3b, 0xf1, 0xa5, 0xe2, 0x73, 0xb4, 0xe9, 0xcb, 0x26, 0xda, 0x50,
	0x33, 0xd3, 0xa0, 0xc3, 0x60, 0xb4, 0x32, 0xee, 0x4f, 0xa2, 0x78, 0x49, 0xfd, 0xb1, 0x37, 0x5e,
	0x5a, 0x36, 0xdd, 0x60, 0xed, 0x23, 0xe8, 0xe8, 0x4f, 0x80, 0x06, 0x0b, 0x08, 0xc6, 0xa8, 0x5b,
	0xd0, 0x29, 0x84, 0xc1, 0x28, 0x18, 0xdf, 0x4f, 0xed, 0x6f, 0x1c, 0xa1, 0x01, 0xe5, 0x1c, 0x38,
	0xa9, 0x04, 0x25, 0xb4, 0x14, 0x61, 0x67, 0x14, 0x8c, 0x7b, 0x69, 0xdf, 0x3e, 0xfc, 0x24, 0xe8,
	0x51, 0x29, 0xf0, 0x17, 0xb4, 0xa7, 0x67, 0x8c, 0x81, 0xd6, 0x44, 0x51, 0x03, 0x04, 0xbe, 0x03,
	0x33, 0x42, 0x16, 0xc4, 0x64, 0x0a, 0x74, 0x26, 0x73, 0x1e, 0xae, 0x8c, 0x82, 0x71, 0x7f, 0xb2,
	0xed, 0xeb, 0xac, 0x83, 0xc6, 0x17, 0x2e, 0x68, 0xba, 0xeb, 0xbd, 0x29, 0x35, 0xf0, 0xd6, 0x3b,
	0x3f, 0x36, 0x46, 0x7c, 0x8a, 0x06, 0x99, 0xd4, 0xe6, 0x26, 0x71, 0xd7, 0x26, 0xde, 0x5b, 0x9a,
	0xf8, 0x4c, 0x6a, 0xe3, 0xe3, 0xae, 0x67, 0xd7, 0xbf, 0x41, 0x47, 0xbf, 0x3b, 0x08, 0xdd, 0x88,
	0xf8, 0x00, 0xdd, 0xf3, 0x63, 0xb2, 0x59, 0xfb, 0x93, 0x61, 0xf3, 0xba, 0x52, 0xc4, 0xd5, 0x24,
	0xae, 0xe7, 0x14, 0x1f, 0x39, 0x22, 0x6d, 0x50, 0xfc, 0x0a, 0xad, 0xd6, 0x55, 0xe8, 0xb0, 0x63,
	0x4b, 0xd8, 0x5f, 0x5a, 0xc2, 0xa5, 0x98, 0x96, 0x39, 0x9c, 0xdb, 0x2d, 0x49, 0x1d, 0x8f, 0xdf,
	0xa1, 0x81, 0x1f, 0xba, 0x4b, 0xe1, 0xbb, 0xf1, 0xec, 0xce, 0x0c, 0x67, 0x96, 0xbe, 0x4e, 0xd2,
	0x3a, 0xe1, 0x43, 0xb4, 0xde, 0xee, 0x75, 0xd8, 0xbd, 0xbb, 0xb1, 0xfd, 0x56, 0x63, 0xf1, 0x63,
	0xb4, 0xf6, 0x13, 0xc4, 0x55, 0x66, 0xc2, 0xd5, 0x51, 0x30, 0x1e, 0xa4, 0xfe, 0x14, 0xfd, 0xed,
	0xa0, 0xcd, 0xff, 0xaf, 0xc4, 0xaf, 0xd1, 0xf0, 0x1b, 0x15, 0x39, 0x70, 0x42, 0x99, 0x11, 0x15,
	0x90, 0xf6, 0xce, 0xda, 0x96, 0xf5, 0xd2, 0x1d, 0x47, 0x1c, 0x59, 0xc0, 0xb9, 0x4f, 0x6a, 0x19,
	0xbf, 0x40, 0x0f, 0xbd, 0x59, 0xce, 0x4c, 0x2e, 0x40, 0x79, 0x9b, 0x5b, 0x1c, 0xec, 0xb4, 0x0f,
	0x4e, 0x72, 0x8e, 0x37, 0x68, 0x77, 0xf1, 0x3a, 0x0e, 0x57, 0x8a, 0xd6, 0x4b, 0xe7, 0x9c, 0x5d,
	0xeb, 0x7c, 0xd2, 0xbe, 0xf0, 0xd4, 0x13, 0xee, 0x05, 0x87, 0x68, 0xa7, 0x84, 0x82, 0x8b, 0xe2,
	0x8a, 0xf0, 0x79, 0x41, 0xa7, 0x82, 0x11, 0x05, 0x53, 0x59, 0xd1, 0xdc, 0xa6, 0xed, 0xa5, 0x8f,
	0xbc, 0x7c, 0xea, 0xd4, 0xd4, 0x89, 0xf8, 0x39, 0xda, 0x6a, 0x7c, 0x4d, 0x50, 0x16, 0xae, 0x59,
	0xc7, 0x86, 0x17, 0x7c, 0x3e, 0x86, 0xdf, 0xa3, 0x2d, 0xe0, 0x9a, 0xdc, 0x1e, 0xe4, 0x83, 0x9b,
	0x65, 0x6c, 0x6d, 0xcf, 0xc2, 0x08, 0x37, 0x80, 0xeb, 0xf6, 0x83, 0xe3, 0x03, 0xb4, 0x2f, 0xa4,
	0x73, 0x95, 0x4a, 0xfe, 0x9a, 0x2f, 0xdb, 0x84, 0xe3, 0xe6, 0xdf, 0xa9, 0x2f, 0xea, 0x4f, 0xc1,
	0x45, 0xf0, 0x75, 0xcd, 0x7e, 0x13, 0x5e, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x96, 0x70, 0xc0,
	0xed, 0xd2, 0x04, 0x00, 0x00,
}
