diff --git a/source/common/upstream/original_dst_cluster.cc b/source/common/upstream/original_dst_cluster.cc
index 41fb681f7..f73b9b066 100644
--- a/source/common/upstream/original_dst_cluster.cc
+++ b/source/common/upstream/original_dst_cluster.cc
@@ -62,7 +62,7 @@ HostConstSharedPtr Cluster::LoadBalancer::chooseHost(LoadBalancerContext* contex
 
         // Create an override transport socket options that automatically provides both SNI as well
         // as SAN verification for the new host if the cluster has been configured with TLS.
-        if (parent_->has_tls_context_) {
+        if (parent_->implements_secure_transport_) {
           absl::string_view sni;
 
           // First check if have requested server name in the downstream connection
@@ -171,7 +171,10 @@ Cluster::Cluster(const envoy::api::v2::Cluster& config, Runtime::Loader& runtime
       use_http_header_(info_->lbOriginalDstConfig()
                            ? info_->lbOriginalDstConfig().value().use_http_header()
                            : false),
-      has_tls_context_(config.has_tls_context()), host_map_(std::make_shared<HostMap>()) {
+      implements_secure_transport_(info_->transportSocketMatcher()
+                                       .resolve(envoy::api::v2::core::Metadata())
+                                       .factory_.implementsSecureTransport()),
+      host_map_(std::make_shared<HostMap>()) {
   // TODO(dio): Remove hosts check once the hosts field is removed.
   if (config.has_load_assignment() || !config.hosts().empty()) {
     throw EnvoyException("ORIGINAL_DST clusters must have no load assignment or hosts configured");
diff --git a/source/common/upstream/original_dst_cluster.h b/source/common/upstream/original_dst_cluster.h
index c6f31650b..e6177a0c3 100644
--- a/source/common/upstream/original_dst_cluster.h
+++ b/source/common/upstream/original_dst_cluster.h
@@ -135,7 +135,7 @@ private:
   const std::chrono::milliseconds cleanup_interval_ms_;
   Event::TimerPtr cleanup_timer_;
   const bool use_http_header_;
-  const bool has_tls_context_;
+  const bool implements_secure_transport_;
 
   absl::Mutex host_map_lock_;
   HostMapConstSharedPtr host_map_ ABSL_GUARDED_BY(host_map_lock_);
